{"meta":{"title":"Kompasim","subtitle":"Personal technology blog","description":"I like Atom but sometimes have to start the Sublime Text again ...","author":"alimjan","url":"http://kompasim.github.io"},"pages":[{"title":"categories","date":"2017-04-01T15:32:22.000Z","updated":"2017-04-01T15:32:22.198Z","comments":true,"path":"categories/index.html","permalink":"http://kompasim.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-04-01T15:32:12.000Z","updated":"2017-04-01T15:32:12.313Z","comments":true,"path":"tags/index.html","permalink":"http://kompasim.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"开源项目托管GitHub入门","slug":"tools-github-demo","date":"2017-04-01T14:06:55.774Z","updated":"2016-12-02T10:39:14.042Z","comments":true,"path":"2017/04/01/tools-github-demo/","link":"","permalink":"http://kompasim.github.io/2017/04/01/tools-github-demo/","excerpt":"","text":"demo 自从google code关闭了下载服务了之后，GitHub作为了目前最好用的免费开源项目托管站点，众多开源项目都托管在github，其中不乏著名的播放器MPC-HC。不习惯于英文的朋友，难免少不了要进行摸索一番，甚至会因此头大而放弃。这里将手把手地教大家一些本人的入门心得 注册github要托管到github，那你就应该要有一个属于你自己的github帐号，所以你应该先到github.com注册打开浏览器在地址栏输入地址：github.com填写用户名、邮箱、密码点击Sign up即可简单地注册 demo 创建仓库完成注册，进入github平台，点击new repositories新建一个新项目（你也可以加入到一个已有的项目）新建项目的操作，其实很简单，输入项目名就可以直接Create了如图 demo 下载仓库到本地输入git clone 接着将先前记录下来的地址复制到后面，回车将下载下来的项目文件夹的所有文件及文件夹，包括.git文件夹在内，全部拷贝到你的托管项目的根目录（或者将你的托管项目拷贝到该目录）然后cd test进入到该托管项目的根目录。 配置用户信息因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。 注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。 demo 编辑需要提交的文件我在版本库目录下新建一个记事本文件 readme.txt 内容如下：11111111 添加到缓存区使用命令 git add readme.txt添加到暂存区里面去。如下： demo 添加到本地仓库用命令 git commit告诉Git，把文件提交到仓库。 demo 现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交 获取ssh地址 demo 上传到github服务器现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：git remote add origin https://github.com/tugenhua0707/testgit.gitgit push origin master所有的如下： demo 把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。 由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了.","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"github","slug":"github","permalink":"http://kompasim.github.io/tags/github/"}]},{"title":"本地仓库管理Git入门","slug":"tools-git-demo","date":"2017-04-01T14:06:55.758Z","updated":"2016-12-02T10:39:14.041Z","comments":true,"path":"2017/04/01/tools-git-demo/","link":"","permalink":"http://kompasim.github.io/2017/04/01/tools-git-demo/","excerpt":"","text":"demo Git是什么？Git是目前世界上最先进的分布式版本控制系统。 在windows上如何安装Git？去这里下载git适合你电脑的版本会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下： demo 创建工作目录所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。 demo 创建本地仓库通过命令 git init 把这个目录变成git可以管理的仓库，如下： demo 这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。 编辑目录内想提交的文件我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111 添加到缓存区使用命令 git add readme.txt添加到暂存区里面去。如下： demo 提交到本地仓库用命令 git commit告诉Git，把文件提交到仓库。 demo 查看状态现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下： demo 再查看状态 说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下： demo 上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？ 比较出修改的部分git diff readme.txt 如下： demo 如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"git","slug":"git","permalink":"http://kompasim.github.io/tags/git/"}]},{"title":"nodejs用superagent发http请求","slug":"nodejs-http-request","date":"2017-03-28T15:26:19.000Z","updated":"2017-03-28T15:50:06.000Z","comments":true,"path":"2017/03/28/nodejs-http-request/","link":"","permalink":"http://kompasim.github.io/2017/03/28/nodejs-http-request/","excerpt":"","text":"demo 0. 导入1var superagent = require(&quot;superagent&quot;); 1. GET12345678910111213superagent .get('/search') .query(&#123; name: 'Manny' &#125;) .query(&#123; num: '5' &#125;) .query(&#123; order: 'desc' &#125;) .end(function(err, res)&#123; if (err || !res.ok) &#123; alert('Oh no! error'); &#125; else &#123; // &#125; &#125;); 2. POST1234567891011121314superagent .post('/api/pet') .type(\"form\") .send(&#123; name: 'Manny', species: 'cat' &#125;) .set('X-API-Key', 'foobar') .set('Accept', 'application/json') .end(function(err, res)&#123; if (err || !res.ok) &#123; alert('Oh no! error'); &#125; else &#123; // &#125; &#125;); 3. 服务端收不到POST参数问题 superagent的post函数调用之后别忘了加上.type(&quot;form&quot;) ，然后用nodejs解析获取POST参数的时候要用body-parser;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/categories/nodejs/"}],"tags":[{"name":"http","slug":"http","permalink":"http://kompasim.github.io/tags/http/"},{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/tags/nodejs/"}]},{"title":"用c语言画ppm图片（二）","slug":"c-and-ppm-two","date":"2017-03-15T12:42:44.000Z","updated":"2017-03-14T15:15:22.241Z","comments":true,"path":"2017/03/15/c-and-ppm-two/","link":"","permalink":"http://kompasim.github.io/2017/03/15/c-and-ppm-two/","excerpt":"","text":"1. PPM介绍关于PPM的介绍请看`用c语言画ppm图片（一）`这篇文章 2. 主代码12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;cstdlib&gt;#define DIM 1024#define DM1 (DIM-1)#define _sq(x) ((x)*(x)) // square#define _cb(x) abs((x)*(x)*(x)) // absolute value of cube#define _cr(x) (unsigned char)(pow((x),1.0/3.0)) // cube root unsigned char GR(int,int);unsigned char BL(int,int); unsigned char RD(int i,int j)&#123; // YOUR CODE HERE&#125;unsigned char GR(int i,int j)&#123; // YOUR CODE HERE&#125;unsigned char BL(int i,int j)&#123; // YOUR CODE HERE&#125; void pixel_write(int,int);FILE *fp;int main()&#123; fp = fopen(\"MathPic.ppm\",\"wb\"); fprintf(fp, \"P6\\n%d %d\\n255\\n\", DIM, DIM); for(int j=0;j&lt;DIM;j++) for(int i=0;i&lt;DIM;i++) pixel_write(i,j); fclose(fp); return 0;&#125;void pixel_write(int i, int j)&#123; static unsigned char color[3]; color[0] = RD(i,j)&amp;255; color[1] = GR(i,j)&amp;255; color[2] = BL(i,j)&amp;255; fwrite(color, 1, 3, fp);&#125; 3. 欣赏 1234567891011unsigned char RD(int i,int j)&#123; return (char)(_sq(cos(atan2(j-512,i-512)/2))*255);&#125; unsigned char GR(int i,int j)&#123; return (char)(_sq(cos(atan2(j-512,i-512)/2-2*acos(-1)/3))*255);&#125; unsigned char BL(int i,int j)&#123; return (char)(_sq(cos(atan2(j-512,i-512)/2+2*acos(-1)/3))*255);&#125; 4. 欣赏 123456789101112unsigned char RD(int i,int j)&#123; #define r(n)(rand()%n) static char c[1024][1024];return!c[i][j]?c[i][j]=!r(999)?r(256):RD((i+r(2))%1024,(j+r(2))%1024):c[i][j];&#125; unsigned char GR(int i,int j)&#123; static char c[1024][1024];return!c[i][j]?c[i][j]=!r(999)?r(256):GR((i+r(2))%1024,(j+r(2))%1024):c[i][j];&#125; unsigned char BL(int i,int j)&#123; static char c[1024][1024];return!c[i][j]?c[i][j]=!r(999)?r(256):BL((i+r(2))%1024,(j+r(2))%1024):c[i][j];&#125; 5. 欣赏 1234567891011unsigned char RD(int i,int j)&#123; float x=0,y=0;int k;for(k=0;k++&lt;256;)&#123;float a=x*x-y*y+(i-768.0)/512;y=2*x*y+(j-512.0)/512;x=a;if(x*x+y*y&gt;4)break;&#125;return log(k)*47;&#125; unsigned char GR(int i,int j)&#123; float x=0,y=0;int k;for(k=0;k++&lt;256;)&#123;float a=x*x-y*y+(i-768.0)/512;y=2*x*y+(j-512.0)/512;x=a;if(x*x+y*y&gt;4)break;&#125;return log(k)*47;&#125; unsigned char BL(int i,int j)&#123; float x=0,y=0;int k;for(k=0;k++&lt;256;)&#123;float a=x*x-y*y+(i-768.0)/512;y=2*x*y+(j-512.0)/512;x=a;if(x*x+y*y&gt;4)break;&#125;return 128-log(k)*23;&#125; 6. 欣赏 1234567891011121314151617181920unsigned char RD(int i,int j)&#123; double a=0,b=0,c,d,n=0; while((c=a*a)+(d=b*b)&lt;4&amp;&amp;n++&lt;880) &#123;b=2*a*b+j*8e-9-.645411;a=c-d+i*8e-9+.356888;&#125; return 255*pow((n-80)/800,3.);&#125; unsigned char GR(int i,int j)&#123; double a=0,b=0,c,d,n=0; while((c=a*a)+(d=b*b)&lt;4&amp;&amp;n++&lt;880) &#123;b=2*a*b+j*8e-9-.645411;a=c-d+i*8e-9+.356888;&#125; return 255*pow((n-80)/800,.7);&#125;unsigned char BL(int i,int j)&#123; double a=0,b=0,c,d,n=0; while((c=a*a)+(d=b*b)&lt;4&amp;&amp;n++&lt;880) &#123;b=2*a*b+j*8e-9-.645411;a=c-d+i*8e-9+.356888;&#125; return 255*pow((n-80)/800,.5);&#125; 7. 欣赏 1234567891011unsigned char RD(int i,int j)&#123; static double k;k+=rand()/1./RAND_MAX;int l=k;l%=512;return l&gt;255?511-l:l;&#125; unsigned char GR(int i,int j)&#123; static double k;k+=rand()/1./RAND_MAX;int l=k;l%=512;return l&gt;255?511-l:l;&#125; unsigned char BL(int i,int j)&#123; static double k;k+=rand()/1./RAND_MAX;int l=k;l%=512;return l&gt;255?511-l:l;&#125; 8. 欣赏 1234567891011121314151617unsigned char RD(int i,int j)&#123; float s=3./(j+99); float y=(j+sin((i*i+_sq(j-700)*5)/100./DIM)*35)*s; return (int((i+DIM)*s+y)%2+int((DIM*2-i)*s+y)%2)*127;&#125; unsigned char GR(int i,int j)&#123; float s=3./(j+99); float y=(j+sin((i*i+_sq(j-700)*5)/100./DIM)*35)*s; return (int(5*((i+DIM)*s+y))%2+int(5*((DIM*2-i)*s+y))%2)*127;&#125; unsigned char BL(int i,int j)&#123; float s=3./(j+99); float y=(j+sin((i*i+_sq(j-700)*5)/100./DIM)*35)*s; return (int(29*((i+DIM)*s+y))%2+int(29*((DIM*2-i)*s+y))%2)*127;&#125; 9. 欣赏 12345678910111213141516unsigned char RD(int i,int j)&#123; #define D DIM #define M m[(x+D+(d==0)-(d==2))%D][(y+D+(d==1)-(d==3))%D] #define R rand()%D #define B m[x][y] return(i+j)?256-(BL(i,j))/2:0;&#125; unsigned char GR(int i,int j)&#123; #define A static int m[D][D],e,x,y,d,c[4],f,n;if(i+j&lt;1)&#123;for(d=D*D;d;d--)&#123;m[d%D][d/D]=d%6?0:rand()%2000?1:255;&#125;for(n=1 return RD(i,j);&#125; unsigned char BL(int i,int j)&#123; A;n;n++)&#123;x=R;y=R;if(B==1)&#123;f=1;for(d=0;d&lt;4;d++)&#123;c[d]=M;f=f&lt;c[d]?c[d]:f;&#125;if(f&gt;2)&#123;B=f-1;&#125;else&#123;++e%=4;d=e;if(!c[e])&#123;B=0;M=1;&#125;&#125;&#125;&#125;&#125;return m[i][j];&#125; 10. 欣赏 1234567891011121314151617181920unsigned char RD(int i,int j)&#123; #define A float a=0,b,k,r,x #define B int e,o #define C(x) x&gt;255?255:x #define R return #define D DIM R BL(i,j)*(D-i)/D;&#125; unsigned char GR(int i,int j)&#123; #define E DM1 #define F static float #define G for( #define H r=a*1.6/D+2.4;x=1.0001*b/D R BL(i,j)*(D-j/2)/D;&#125; unsigned char BL(int i,int j)&#123; F c[D][D];if(i+j&lt;1)&#123;A;B;G;a&lt;D;a+=0.1)&#123;G b=0;b&lt;D;b++)&#123;H;G k=0;k&lt;D;k++)&#123;x=r*x*(1-x);if(k&gt;D/2)&#123;e=a;o=(E*x);c[e][o]+=0.01;&#125;&#125;&#125;&#125;&#125;R C(c[j][i])*i/D;&#125;","categories":[{"name":"c","slug":"c","permalink":"http://kompasim.github.io/categories/c/"}],"tags":[{"name":"c","slug":"c","permalink":"http://kompasim.github.io/tags/c/"},{"name":"image","slug":"image","permalink":"http://kompasim.github.io/tags/image/"}]},{"title":"用c语言画ppm图片（一）","slug":"c-and-ppm-one","date":"2017-03-14T14:45:47.000Z","updated":"2017-03-14T15:03:29.220Z","comments":true,"path":"2017/03/14/c-and-ppm-one/","link":"","permalink":"http://kompasim.github.io/2017/03/14/c-and-ppm-one/","excerpt":"","text":"1. PPM介绍PPM（Portable PixMap）是portable像素图片，是有netpbm项目定义的一系列的portable图片格式中的一个。这些图片格式都相对比较容易处理，跟平台无关，所以称之为portable，简单理解，就是比较直接的图片格式，比如PPM，其实就是把每一个点的RGB分别保存起来。所以，PPM格式的文件是没有压缩的，相对比较大，但是由于图片格式简单，一般作为图片处理的中间文件（不会丢失文件信息），或者作为简单的图片格式保存。 2. PPM格式分析netpbm的几种图片格式是通过其表示的颜色类型来区别的，PBM是位图，只有黑色和白色，PGM是灰度图片，PPM是代表完整的RGB颜色的图片。 (1) 文件头 文件头由三个部分（或者认为是四个部分）组成：这几个部分之间用回车或换行分隔（但是PPM标准中要求是空格） * 第一部分是文件magic number： 每一个netpbm图片由两个字节的magic number (ASCII)组成，来标识文件的类型(PMB/PGM/PPM)以及文件的编码(ASCII或binary). 所以PPM格式的起始两个字节为P3或者P6. 关于编码(ASCII或binary): 其区别是ASCII编码的文件是对于阅读友好的，可以字节用文本编辑器打开，并读取其对应的图片的数据（比如RGB的值），然后中间会有空格回车等隔开。binary就是按照二进制的形式，顺序存储图片信息，没有空格回车分隔。所以很显然，binary格式的图片处理起来更快（不需要判断空格回车），而且图片会更小，但是ASCII阅读调试更为直接。 * 第二部分是图像宽度和高度（空格隔开），用ASCII表示。 * 第三部分是描述像素的最大颜色组成，允许描述超过一个字节（0-255）的颜色值。 另外，在上面的三个部分里面，都可以使用&quot;#&quot;插入注释，注释是#到行尾(回车或换行)部分。 (2) 图像数据部分 对于ASCII格式，就是按照RGB的顺序排列，以ASCII存储，并且，RGB中间用空格隔开，图片每一行用回车隔开。 对于binary格式，就是每一个像素点的RGB值分别顺序存储并且按二进制写入文件(fwrite)，没有任何分隔。 比如下面这个图片 (一共六个像素点，图片宽度为3，高度为2）: 3. 代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int writePPMHeader(FILE *f, char magic, int w, int h, int color) &#123; if (f==NULL) &#123; printf(\"FILE error\\n\"); exit(0); &#125; if (magic=='A') &#123;// ASCII fprintf(f, \"P3\\n\"); &#125; else if (magic=='B') &#123; fprintf(f, \"P6\\n\"); &#125; else &#123; printf(\"Magic can only be A(ASCII) or B(binary)\\n\"); exit(0); &#125; fprintf(f, \"%d %d\\n\", w, h); fprintf(f, \"%d\\n\", color); return 0; &#125; int writePPMdataP3(FILE* f, unsigned char* img, int w, int h) &#123; int i,j; for(i=0;i&lt;h;i++) &#123; // every rwo for(j=0;j&lt;w;j++) &#123; // every line fprintf(f, \"%d \",img[i*w*3+3*j]); fprintf(f, \"%d \",img[i*w*3+3*j+1]); fprintf(f, \"%d \",img[i*w*3+3*j+2]);&lt;span style=\"white-space:pre\"&gt; &lt;/span&gt;// PS: 对于j=w-1的时候，最后一个空格可以不写，但是这里就不考虑了 &#125; fprintf(f, \"\\n\"); &#125; &#125; int writePPMdataP6(FILE* f, unsigned char* img, int w, int h) &#123; int i,j; for(i=0;i&lt;w;i++) &#123; for(j=0;j&lt;h;j++) &#123; fwrite(img, w*h, 3, f); &#125; &#125; &#125; #define WIDTH 3 #define HEIGHT 2 unsigned char img[WIDTH*HEIGHT*3]=&#123;255,0,0,0,255,0,0,0,255,255,255,0,255,255,255,0,0,0&#125;; int main() &#123; char *filename1 = \"testP3.ppm\"; char *filename2 = \"testP6.ppm\"; FILE *f3 = fopen(filename1, \"w\"); if (f3==NULL) &#123; printf(\"FILE error\\n\"); exit(0); &#125; FILE *f6 = fopen(filename2, \"w\"); if (f6==NULL) &#123; printf(\"FILE error\\n\"); exit(0); &#125; writePPMHeader(f3, 'A', WIDTH, HEIGHT, 255); writePPMdataP3(f3, img, WIDTH, HEIGHT); writePPMHeader(f6, 'B', WIDTH, HEIGHT, 255); writePPMdataP6(f6, img, WIDTH, HEIGHT); fclose(f3); fclose(f6); return 0; &#125; 4. 更多图形 更多图形请看用c语言画ppm图片（二）这篇文章。","categories":[{"name":"c","slug":"c","permalink":"http://kompasim.github.io/categories/c/"}],"tags":[{"name":"c","slug":"c","permalink":"http://kompasim.github.io/tags/c/"},{"name":"image","slug":"image","permalink":"http://kompasim.github.io/tags/image/"}]},{"title":"java发起http请求","slug":"java-http-request","date":"2017-02-20T01:50:50.000Z","updated":"2017-02-27T03:12:17.000Z","comments":true,"path":"2017/02/20/java-http-request/","link":"","permalink":"http://kompasim.github.io/2017/02/20/java-http-request/","excerpt":"","text":"demo 0. HttpUtil 类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package com.kompasim.utils;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;public class HttpUtil &#123; String path = null; URL url = null; HttpURLConnection urlConnection = null; private String resultData = \"\"; public HttpUtil(String p)&#123; path = p; &#125; public void open(String string)&#123; try &#123; url = new URL(path + \"?\" + string); System.out.println(\"url is : \" + url); urlConnection = (HttpURLConnection)url.openConnection(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void setHeader(String name, String value)&#123; urlConnection.addRequestProperty(name,value); &#125; public String get()&#123; try &#123; //headers urlConnection.setRequestMethod(\"GET\"); urlConnection.setUseCaches(false); urlConnection.setConnectTimeout (5000); urlConnection.connect(); if (urlConnection.getResponseCode()!=200)&#123; System.out.println(\"err : get网络请求失败,返回200\"); return \"error\"; &#125;else &#123; InputStreamReader isr = new InputStreamReader(urlConnection.getInputStream()); BufferedReader br = new BufferedReader(isr); String line = null; while((line=br.readLine())!=null)&#123; resultData += line; &#125; isr.close(); br.close(); urlConnection.disconnect(); return resultData.toString(); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); System.out.println(\"err : \" + e.getStackTrace().toString()); return \"error\"; &#125; &#125; public String post(String encodedString)&#123; try &#123; urlConnection.setDoOutput(true); urlConnection.setDoInput(true); urlConnection.setConnectTimeout(5*1000); &#125;catch (Exception e)&#123; System.out.println(\"err : \" + e.getStackTrace().toString()); &#125; try&#123; urlConnection.setRequestMethod(\"POST\"); urlConnection.setUseCaches(false); urlConnection.setRequestProperty(\"Content-Type\",\"application/x-www-form-urlencoded\"); urlConnection.connect(); DataOutputStream out = new DataOutputStream(urlConnection.getOutputStream()); // 参数 // 将要上传的内容写入流中 out.writeBytes(encodedString); // 刷新关闭 out.flush(); out.close(); if (urlConnection.getResponseCode()!=200)&#123; System.out.println(\"err : post网络请求失败,返回200\"); return \"error\"; &#125;else &#123; InputStreamReader isr = new InputStreamReader(urlConnection.getInputStream()); BufferedReader br = new BufferedReader(isr); String line = null; while((line=br.readLine())!=null)&#123; resultData += line; &#125; isr.close(); urlConnection.disconnect(); return resultData.toString(); &#125; &#125;catch(Exception e)&#123; System.out.println(\"err : \" + e.getStackTrace().toString()); return \"error\"; &#125; &#125;&#125; 1. 发起get请求123456HttpUtil httpUtil = new HttpUtil(\"http://api.kompasim.cn/humor.php\");String queryStr = \"bodyName1=\" + URLEncoder.encode(\"bodyValue1\",\"UTF-8\") + \"&amp;bodyName2=\" + URLEncoder.encode(\"bodyValue2\",\"UTF-8\");httpUtil.open(queryStr);httpUtil.setHeader(\"headerNmae1\", \"headerValue1\");httpUtil.setHeader(\"headerNmae2\", \"headerValue2\");String resultStr = httpUtil.get(); 2. 发起post请求123456HttpUtil httpUtil = new HttpUtil(\"http://api.kompasim.cn/humor.php\");httpUtil.open(\"\");httpUtil.setHeader(\"headerNmae1\", \"headerValue1\");httpUtil.setHeader(\"headerNmae2\", \"headerValue2\");String queryStr = \"bodyName1=\" + URLEncoder.encode(\"bodyValue1\",\"UTF-8\") + \"&amp;bodyName2=\" + URLEncoder.encode(\"bodyValue2\",\"UTF-8\");String resultStr = httpUtil.post(queryStr); 3. 线程间通信123456789101112131415161718192021222324252627282930// handlerHandler handler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case 1: String resultStr = (String)msg.obj; // do something TextView textView = (TextView)findViewById(R.id.textView); textView.setText(resultStr); break; default: break; &#125; &#125; &#125;;// timer taskTimerTask tt = new TimerTask() &#123; @Override public void run() &#123; // do post or do get String resultStr = \"\"; Message msg = new Message(); msg.what = 5; msg.obj = resultStr; handler.sendMessage(msg); &#125;&#125;;Timer t = new Timer(true);t.schedule(tt, 0, 1000);","categories":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/tags/java/"},{"name":"http","slug":"http","permalink":"http://kompasim.github.io/tags/http/"}]},{"title":"Nginx在Ubuntu上的基本知识","slug":"nginx-on-ubuntu-one","date":"2017-01-26T03:08:55.000Z","updated":"2017-01-26T03:57:27.755Z","comments":true,"path":"2017/01/26/nginx-on-ubuntu-one/","link":"","permalink":"http://kompasim.github.io/2017/01/26/nginx-on-ubuntu-one/","excerpt":"","text":"demo 1.在线安装 $sudo apt-get install nginx ubuntu安装Nginx之后的文件结构如下: 所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下 启动程序文件在/usr/sbin/nginx 日志放在了/var/log/nginx中，分别是access.log和error.log 并已经在/etc/init.d/下创建了启动脚本nginx 默认的虚拟主机的目录设置在了/usr/share/nginx/www 2.源代码安装 下载地址：http://nginx.org/download/ 我这里下载的是 nginx-1.3.9.tar.gz，安装过程很简单，如下： $./configure $make $make install 安装成功之后，nginx放置在/usr/local/nginx目录下，主要的配置文件为conf目录下的nginx.conf，nginx的启动文件在sbin目录下的nginx文件。 3.修改监听端口 修改nginx的配置文件nginx.conf，将一下这一行 listen 80; 修改为 listen 8080; 然后就可以访问了，http://localhost:8080/ 。 4. 配置文件 Nginx的配置文件是/etc/nginx/nginx.conf，其中设置了一些必要的参数，我们发现其中这样的语句： include /etc/nginx/sites-enabled/* 可以看出 /etc/nginx/sites-enabled/default 文件也是一个核心的配置文件，其中包含了主要的配置信息，如服务器跟目录、服务器名称、location信息和server信息。 对于源代码安装的nginx，配置文件为 /usr/local/nginx/conf/nginx.conf 。 5. location的匹配规则 （1）= 前缀的指令严格匹配这个查询。如果找到，停止搜索。 （2）剩下的常规字符串，最长的匹配优先使用。如果这个匹配使用 ^~ 前缀，搜索停止。 （3）正则表达式，按配置文件里的顺序，第一个匹配的被使用。 （4）如果第三步产生匹配，则使用这个结果。否则使用第二步的匹配结果。 在location中可以使用常规字符串和正则表达式。如果使用正则表达式，你必须使用以下规则： ~* 前缀选择不区分大小写的匹配 ~ 选择区分大小写的匹配 1234location = / &#123; # 只匹配 / 查询。 [ configuration A ]&#125; 12345location / &#123; # 匹配任何查询，因为所有请求都以 / 开头。 # 但是正则表达式规则和长的块规则将被优先和查询匹配。 [ configuration B ]&#125; 12345location ^~ /images/ &#123; # 匹配任何以 /images/ 开头的任何查询并且停止搜索。 # 任何正则表达式将不会被测试。 [ configuration C ]&#125; 12345location ~* \\.(gif|jpg|jpeg)$ &#123; # 匹配任何以 gif、jpg 或 jpeg 结尾的请求。 # 然而所有 /images/ 目录的请求将使用 Configuration C。 [ configuration D ]&#125; 6. 常用命令 -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /usr/local/nginx/) -c filename : set configuration file (default: conf/nginx.conf) -g directives : set global directives out of configuration file","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://kompasim.github.io/tags/Ubuntu/"},{"name":"Nginx","slug":"Nginx","permalink":"http://kompasim.github.io/tags/Nginx/"},{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"}]},{"title":"Ubuntu上配置Nginx服务器","slug":"nginx-on-ubuntu-two","date":"2017-01-26T02:42:34.000Z","updated":"2017-01-26T03:56:25.598Z","comments":true,"path":"2017/01/26/nginx-on-ubuntu-two/","link":"","permalink":"http://kompasim.github.io/2017/01/26/nginx-on-ubuntu-two/","excerpt":"","text":"demo 0.Nginx的介绍 Nginx是一个非常轻量级的HTTP服务器，Nginx，它的发音为“engine X”， 是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。 1.安装Nginx apt-get install nginx 2.启动Nginx service nginx start 3.访问服务器IP 如果看到“Welcome to nginx!”说明安装好了。 4.安装PHP apt-get install php5-fpm 5.配置Nginx vim /etc/nginx/sites-available/default 找到下列代码，去掉相应注释 1234location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php5-fpm.sock;&#125; 重启服务 service nginx restart 6.默认的网站根目录在/var/www/html vim /var/www/html/test.php 输入以下内容,并保存 123&lt;?phpecho phpinfo();?&gt; 访问网站IP/test.php，如果可以看到phpinfo的信息说明php安装成功。 7.参考 CSDN Lnho的专栏","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://kompasim.github.io/tags/Ubuntu/"},{"name":"Nginx","slug":"Nginx","permalink":"http://kompasim.github.io/tags/Nginx/"},{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"}]},{"title":"php简单文件上传和下载","slug":"php-upload-download","date":"2016-06-02T14:49:31.000Z","updated":"2016-12-02T10:39:14.043Z","comments":true,"path":"2016/06/02/php-upload-download/","link":"","permalink":"http://kompasim.github.io/2016/06/02/php-upload-download/","excerpt":"","text":"demo php简单实现文件上传和下载当然实际应用中还是要检测文件大小呀，格式呀什么的… 1. htmlindex.php12345678910111213141516171819202122232425262728&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"Generator\" content=\"EditPlus®\"&gt; &lt;meta name=\"Author\" content=\"\"&gt; &lt;meta name=\"Keywords\" content=\"\"&gt; &lt;meta name=\"Description\" content=\"\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; font-family:''; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h2&gt;upload a file&lt;h2&gt; &lt;form style='width:400px;height:400px;border:solid 5px red;border-radius:10px' enctype='multipart/form-data' method='post' action='upload.php'&gt; &lt;input type='file' name='file'&gt; &lt;/br&gt; &lt;input type='submit' value='submit'&gt; &lt;/br&gt; &lt;/br&gt; &lt;form&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 2. uploadupload.php123456789101112131415161718&lt;center&gt;&lt;?phpheader('content-type:text/html;charset=utf-8');$file=$_FILES;//echo '';if(!is_uploaded_file($file['file']['tmp_name']))&#123; echo 'please select a file ...';&#125;else&#123; move_uploaded_file($file['file']['tmp_name'],$file['file']['name']); echo \"&lt;a href='download.php?a=\".$file['file']['name'].\"'&gt;\".$file['file']['name'].\"&lt;/a&gt;\"; &#125;?&gt;&lt;/center&gt; 3. downloaddownload.php12345678910&lt;?php//$filename=\"http://liaoxuefeng-static.oss-cn-hangzhou.aliyuncs.com/static-img/maiziedu.jpg\";$filename=$_GET[\"a\"];header('content-type:text/html;charset=utf-8');header(\"Content-type: octet/stream\");header(\"content_type:application/octed-stream\");header('Content-Disposition: attachment; filename='.$filename);ob_clean ();readfile($filename);?&gt; 4. HTML51&lt;a href=&quot;photo.jpg&quot; download=&quot;photo_name&quot;&gt;download&lt;/a&gt;","categories":[{"name":"php","slug":"php","permalink":"http://kompasim.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kompasim.github.io/tags/php/"}]},{"title":"android的webview和back键","slug":"android-webview-demo","date":"2016-06-02T12:29:03.000Z","updated":"2016-12-02T10:39:14.041Z","comments":true,"path":"2016/06/02/android-webview-demo/","link":"","permalink":"http://kompasim.github.io/2016/06/02/android-webview-demo/","excerpt":"","text":"这是一个简单的webview实例，你可以看到当单击back键的时候，如果webview有浏览历史的话history会弹出栈，如果没有浏览历史的话如果两秒内点击两次侧推出app，不然没有响应。 1. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package com.example.mywork;import java.util.Timer;import java.util.TimerTask;import android.support.v7.app.ActionBarActivity;import android.support.v4.app.Fragment;import android.app.Activity;import android.os.Bundle;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.webkit.WebView;import android.os.Build;import android.webkit.WebViewClient;import android.widget.Toast;public class MainActivity extends Activity &#123; private WebView webView; private static boolean mBackKeyPressed = false;//记录是否有首次按键 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); this.requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.activity_main); this.initWebView(); &#125; protected void initWebView()&#123; this.webView = (WebView)findViewById(R.id.webView); this.webView.getSettings().setJavaScriptEnabled(true); this.webView.setWebViewClient(new WebViewClient()); this.webView.loadUrl(\"http://www.1tamche.com\"); &#125; @Override public boolean onKeyDown(int keyCode, KeyEvent event) &#123; // TODO Auto-generated method stub if(keyCode==KeyEvent.KEYCODE_BACK)&#123; if(this.webView.canGoBack())&#123; //需要处理 this.webView.goBack(); return true; &#125;else&#123; if(!mBackKeyPressed)&#123; mBackKeyPressed = true; new Timer().schedule(new TimerTask() &#123; @Override public void run() &#123; // TODO Auto-generated method stub mBackKeyPressed = false; &#125;//延时两秒，如果超出则擦错第一次按键记录 &#125;, 2000); return true; &#125; else&#123;//退出程序 this.finish(); System.exit(0); &#125; &#125; &#125; return super.onKeyDown(keyCode,event); &#125; &#125;class webViewClient extends WebViewClient&#123; //重写shouldOverrideUrlLoading方法，使点击链接后不使用其他的浏览器打开。 @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); //如果不需要其他对点击链接事件的处理返回true，否则返回false return true; &#125; &#125;","categories":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/tags/java/"},{"name":"android","slug":"android","permalink":"http://kompasim.github.io/tags/android/"}]},{"title":"nodejs操作mysql","slug":"nodejs-mysql-connection","date":"2016-05-30T15:36:00.000Z","updated":"2016-12-02T10:39:14.043Z","comments":true,"path":"2016/05/30/nodejs-mysql-connection/","link":"","permalink":"http://kompasim.github.io/2016/05/30/nodejs-mysql-connection/","excerpt":"","text":"demo 1. 安装 $ npm install mysql 2. 代码123456789101112131415161718var mysql = require('mysql');var connection = mysql.createConnection(&#123; host : 'localhost', user : 'root', password : 'root', database : 'test'&#125;);connection.connect();connection.query('select * from test', function(err, rows) &#123; if (err) throw err; console.log('The solution is: ', rows); console.log(fiels);&#125;);connection.end(); 3. 结束","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/categories/nodejs/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://kompasim.github.io/tags/mysql/"},{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/tags/nodejs/"}]},{"title":"java操作mysql","slug":"java-mysql-connection","date":"2016-05-30T13:15:03.000Z","updated":"2016-12-02T10:39:14.042Z","comments":true,"path":"2016/05/30/java-mysql-connection/","link":"","permalink":"http://kompasim.github.io/2016/05/30/java-mysql-connection/","excerpt":"","text":"demo 1. 下载java的mysql驱动 mysql-connector-java-5.1.26-bin.jar 下载 2. 导入工程 在工程的树状文件结构里右击以上jar文件选择build path再选择add to build path 3. 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import java.sql.DriverManager;import java.sql.Connection;import java.sql.Statement;import java.sql.ResultSet;import java.sql.SQLException;public class JavaMysqlConnection&#123; public static void main(String[] args)&#123; //variables used to operate the mysql database Connection connection = null; Statement statement = null; String sql = null; ResultSet resultSet = null; //the information of mysql database String user = \"root\"; String password = \"root\"; String url = \"jdbc:mysql://localhost/test\"; //look up the mysql diriver , is it useful ? try&#123; Class.forName(\"com.mysql.jdbc.Driver\"); &#125;catch(ClassNotFoundException e)&#123; System.out.println(\"mysql driver is not ready ...\"); e.printStackTrace(); &#125; // open a mysql connection to java application try&#123; connection = DriverManager.getConnection(url,user,password);//url,user,password &#125;catch(SQLException e)&#123; System.out.println(\"there is sql exception when connecting ...\"); e.printStackTrace(); &#125; // operate the mysql try&#123; statement = connection.createStatement(); sql = \"select * from test\";//sql to execute resultSet = statement.executeQuery(sql); while(resultSet.next())&#123; System.out.println(\"id:\"+resultSet.getInt(\"id\")+\"\\tname:\"+resultSet.getString(\"name\")+\"\\tage:\"+resultSet.getInt(\"age\")+\"\\tdescription:\"+resultSet.getString(\"description\")); &#125; &#125;catch(SQLException e)&#123; System.out.println(\"there is sql exception ...\"); e.printStackTrace(); &#125; // close the connection try&#123; if(resultSet!=null)&#123; resultSet.close(); resultSet = null; &#125; if(statement!=null)&#123; statement.close(); statement = null; &#125; if(connection!=null)&#123; connection.close(); connection = null; &#125; &#125;catch(Exception e)&#123; System.out.println(\"something was wrong when closing the connection to mysql ...\"); e.printStackTrace(); &#125; System.out.println(\"java connection to mysql is ending...\"); &#125;&#125; 4. insert12sql = \"insert into test(id, name, age, description) values(88,'sofia', 19, 'this is sofia ...')\";statement.executeUpdate(sql); 5. update12sql = \"update test set name='tony' where id&gt;6\";statement.executeUpdate(sql); 6. delete12sql = \"delete from test where name='tony'\";statement.execute(sql); 7. 参考 波纹的博客","categories":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://kompasim.github.io/tags/java/"},{"name":"mysql","slug":"mysql","permalink":"http://kompasim.github.io/tags/mysql/"}]},{"title":"python连接mysql","slug":"python-mysql-connection","date":"2016-05-29T15:22:44.000Z","updated":"2016-12-02T10:39:14.044Z","comments":true,"path":"2016/05/29/python-mysql-connection/","link":"","permalink":"http://kompasim.github.io/2016/05/29/python-mysql-connection/","excerpt":"","text":"demo 1. 安装PyMySQL $ pip install pymysql github地址 2. select操作123456789101112131415161718192021import pymysqlconnection = pymysql.connect( host=\"localhost\", port = 3306, user = \"root\", password = \"root\", db = \"test\", charset = \"utf8\")cur = connection.cursor()cur.execute(\"select * from test\")# row = cur.fetchone()# print (row)res = cur.fetchall()for row in res: print (row)connection.close()val = input(\"press any key to exit ...\") 3. insert操作123456with connection.cursor() as cur: sql = \"insert into test(id, name, age, description) values(11,'tony',%s,%s)\" cur.execute(sql, (30, \"this is description to tony ...\"))# connection is not autocommit by default.# So you must commit to save your changes.connection.commit() 4. 错误处理1234567# open the connection# connection = pymysql.connect()try: # with connection.cursor() as cursor: # do something with cursorfinally: # close the conection","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://kompasim.github.io/tags/mysql/"},{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"}]},{"title":"python模块tkinter的events","slug":"python-tkinter-events","date":"2016-05-11T14:44:38.000Z","updated":"2016-12-02T10:39:14.044Z","comments":true,"path":"2016/05/11/python-tkinter-events/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-events/","excerpt":"","text":"demo 原文 1. event binding1234567891011121314151617from Tkinter import *root = Tk()def key(event): print \"pressed\", repr(event.char)def callback(event): frame.focus_set() print \"clicked at\", event.x, event.yframe = Frame(root, width=100, height=100)frame.bind(\"&lt;Key&gt;\", key)frame.bind(\"&lt;Button-1&gt;\", callback)frame.pack()root.mainloop() 2. events12345678910111213&lt;Button-1&gt;&lt;B1-Motion&gt;&lt;ButtonRelease-1&gt;&lt;Double-Button-1&gt;&lt;Enter&gt;&lt;Leave&gt;&lt;FocusIn&gt;&lt;FocusOut&gt;&lt;Return&gt;&lt;Key&gt;a # The user typed an “a”.&lt;Shift-Up&gt; # The user pressed the Up arrow, while holding the Shift key pressed.&lt;Configure&gt; # The widget changed size (or location, on some platforms) 1. event object1234567891011121314# get the event objectdef key(event): print \"pressed\", repr(event.char) print \"clicked at\", event.x, event.y# attributeswidgetx, yx_root, y_rootcharkeysymkeycodenumwidth, heighttype","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的widget讲解","slug":"python-tkinter-widget","date":"2016-05-11T14:34:40.000Z","updated":"2016-12-02T10:39:14.046Z","comments":true,"path":"2016/05/11/python-tkinter-widget/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-widget/","excerpt":"","text":"demo 原文 1. options123456val = cget(“option”) =&gt; stringconfig(option=value, …)configure(option=value, …)val = elem[\"option\"]elem[\"option\"] = \"value\"button = Button(frame, &#123;\"text\": \"QUIT\", \"fg\": \"red\", \"command\": frame.quit&#125;) 2. print the method and options12print (elem.keys())print (dir(elem)) 3. styling12rgb = widget.winfo_rgb(\"red\")red, green, blue = rgb[0]/256, rgb[1]/256, rgb[2]/256 3. fonts1234567891011(\"Times\", 10, \"bold\")(\"Helvetica\", 10, \"bold italic\")(\"Symbol\", 8)\"Times 10 bold\"\"Helvetica 10 bold italic\"\"Symbol 8\"# tkFont moduletkFont.Font(family=\"Times\", size=10, weight=tkFont.BOLD)tkFont.Font(family=\"Helvetica\", size=10, weight=tkFont.BOLD, slant=tkFont.ITALIC)tkFont.Font(family=\"Symbol\", size=8) 4. Text Formatting12justify = # option to LEFT or RIGHT. The default value is CENTER.wraplength = # option to set a maximum width, 1. border123456borderwidth (or bd)relief = # SUNKEN, RAISED, GROOVE, RIDGE, and FLAT.# Focus Highlights #highlightcolorhighlightbackgroundhighlightthickness 1. cursor12","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python-tkinter-menu","slug":"python-tkinter-menu","date":"2016-05-11T05:31:33.000Z","updated":"2016-12-02T10:39:14.045Z","comments":true,"path":"2016/05/11/python-tkinter-menu/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-menu/","excerpt":"","text":"demo 原文 1. Menubutton12345mb = tkinter.Menubutton( root, bg = \"red\")mb.pack() 2.Menu12345678def hello(): print (\"hello ...\")m = tkinter.Menu( root)m.add_command(label = \"one\",command = hello)m.add_command(label = \"two\",command = hello)root.config(menu = m) 3. Menu1234567891011121314151617181920212223242526def hello(): print (\"hello!\")menubar = tkinter.Menu(root)# create a pulldown menu, and add it to the menu barfilemenu = tkinter.Menu(menubar, tearoff=0)filemenu.add_command(label=\"Open\", command=hello)filemenu.add_command(label=\"Save\", command=hello)filemenu.add_separator()filemenu.add_command(label=\"Exit\", command=root.quit)menubar.add_cascade(label=\"File\", menu=filemenu)# create more pulldown menuseditmenu = tkinter.Menu(menubar, tearoff=0)editmenu.add_command(label=\"Cut\", command=hello)editmenu.add_command(label=\"Copy\", command=hello)editmenu.add_command(label=\"Paste\", command=hello)menubar.add_cascade(label=\"Edit\", menu=editmenu)helpmenu = tkinter.Menu(menubar, tearoff=0)helpmenu.add_command(label=\"About\", command=hello)menubar.add_cascade(label=\"Help\", menu=helpmenu)# display the menuroot.config(menu=menubar) 4. context menu123456789101112131415161718def hello(): print (\"hello!\")# create a popup menumenu = tkinter.Menu(root, tearoff=0)menu.add_command(label=\"Undo\", command=hello)menu.add_command(label=\"Redo\", command=hello)# create a canvasframe = tkinter.Frame(root, width=212, height=212)frame.pack()def popup(event): menu.post(event.x_root, event.y_root)# attach popup to canvasframe.bind(\"&lt;Button-3&gt;\", popup) 4. menu update123456789101112131415161718counter = 0def update(): global counter counter = counter + 1 menu.entryconfig(0, label=str(counter))root = Tk()menubar = Menu(root)menu = Menu(menubar, tearoff=0, postcommand=update)menu.add_command(label=str(counter))menu.add_command(label=\"Exit\", command=root.quit)menubar.add_cascade(label=\"Test\", menu=menu)root.config(menu=menubar) 5. methods1234567891011121314151617181920212223242526Menu(master=None, **options)__init__(master=None, **options) [#]activate(index) [#]add(type, **options) [#]add_cascade(**options) [#]add_checkbutton(**options) [#]add_command(**options) [#]add_radiobutton(**options) [#]add_separator(**options) [#]config(**options) [#]delete(index1, index2=None) [#]entrycget(index, option) [#]entryconfig(index, **options) [#]entryconfigure(index, **options) [#]index(index) [#]insert(index, itemType, **options) [#]insert_cascade(index, **options) [#]insert_checkbutton(index, **options) [#]insert_command(index, **options) [#]insert_radiobutton(index, **options) [#]insert_separator(index, **options) [#]invoke(index) [#]post(x, y) [#]type(index) [#]unpost() [#]yposition(index) [#]","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的图片运用","slug":"python-tkinter-images","date":"2016-05-11T05:31:24.000Z","updated":"2016-12-02T10:39:14.044Z","comments":true,"path":"2016/05/11/python-tkinter-images/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-images/","excerpt":"","text":"demo 原文 1. PhotoImage12345678910111213141516# The PhotoImage class can read GIF and PGM/PPM images from files:photo = PhotoImage(file=\"image.gif\")# base64photo = \"\"\"R0lGODdhEAAQAIcAAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQoKCgsLCwwMDA0NDQ4ODg8PDxAQEBERERISEhMTExQUFBUVFRYWFhcXFxgYGBkZGRoaGhsbGxwcHB0dHR4eHh8fHyAgICEh...AfjHtq1bAP/i/gPwry4AAP/yAtj77x+Af4ABAwDwrzAAAP8SA/j3DwCAfwAA/JsM4J/lfwD+/QMA4B8AAP9Ci/4HoLTpfwD+qV4NoHVAADs=\"\"\"photo = PhotoImage(data=photo)# If you need to work with other file formats, the Python Imaging Library (PIL) contains classes that lets you load images in over 30 formats, and convert them to Tkinter-compatible image objects:from PIL import Image, ImageTkimage = Image.open(\"lenna.jpg\")photo = ImageTk.PhotoImage(image) 2. BitmapImage123456789101112131415161718192021222324252627282930313233343536# base64BITMAP = \"\"\"#define im_width 32#define im_height 32static char im_bits[] = &#123;0xaf,0x6d,0xeb,0xd6,0x55,0xdb,0xb6,0x2f,0xaf,0xaa,0x6a,0x6d,0x55,0x7b,0xd7,0x1b,0xad,0xd6,0xb5,0xae,0xad,0x55,0x6f,0x05,0xad,0xba,0xab,0xd6,0xaa,0xd5,0x5f,0x93,0xad,0x76,0x7d,0x67,0x5a,0xd5,0xd7,0xa3,0xad,0xbd,0xfe,0xea,0x5a,0xab,0x69,0xb3,0xad,0x55,0xde,0xd8,0x2e,0x2b,0xb5,0x6a,0x69,0x4b,0x3f,0xb4,0x9e,0x92,0xb5,0xed,0xd5,0xca,0x9c,0xb4,0x5a,0xa1,0x2a,0x6d,0xad,0x6c,0x5f,0xda,0x2c,0x91,0xbb,0xf6,0xad,0xaa,0x96,0xaa,0x5a,0xca,0x9d,0xfe,0x2c,0xa5,0x2a,0xd3,0x9a,0x8a,0x4f,0xfd,0x2c,0x25,0x4a,0x6b,0x4d,0x45,0x9f,0xba,0x1a,0xaa,0x7a,0xb5,0xaa,0x44,0x6b,0x5b,0x1a,0x55,0xfd,0x5e,0x4e,0xa2,0x6b,0x59,0x9a,0xa4,0xde,0x4a,0x4a,0xd2,0xf5,0xaa&#125;;\"\"\"bitmap = BitmapImage(data=BITMAP)bitmap = BitmapImage( data=BITMAP, foreground=\"white\", background=\"black\", maskdata=MASK_BITMAP)# filebitmap = BitmapImage(file=\"bitmap.xbm\")# bitmap configbitmap.config(foreground=\"blue\")bitmap[\"foreground\"] = \"red\"print bitmap[\"foreground\"] 3. usage1234567# photolabel = Label(image=photo)label.image = photo # keep a reference!label.pack()# bitmaplabel = Label(image=bitmap)label.pack()","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的variable","slug":"python-tkinter-variables","date":"2016-05-11T05:31:15.000Z","updated":"2016-12-02T10:39:14.046Z","comments":true,"path":"2016/05/11/python-tkinter-variables/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-variables/","excerpt":"","text":"demo 原文 1. type12345# The Variable ClassesBooleanVarDoubleVarIntVarStringVar 2. usage12val = StringVar()label = Label(text = \"text...\",textvariable = val) 3. methods123456789# valuevalue = val.get()val.set(\"new text ...\")# other# mode is one of the \"w\",\"u\",\"r\"trace(mode, callback)trace_variable(mode, callback)trace_vdelete(mode, observer name)trace_vinfo()","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的window-methods","slug":"python-tkinter-window-methods","date":"2016-05-11T05:30:35.000Z","updated":"2016-12-02T10:39:14.046Z","comments":true,"path":"2016/05/11/python-tkinter-window-methods/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-window-methods/","excerpt":"","text":"demo 原文 1. args12345678attributes(*args) # Sets or gets window attributes.# argsalpha=disabled=modified=titlepath=toolwindow=topmost= 2. methods1234567891011121314151617181920client(name=None) [#]colormapwindows(*wlist) [#]command(value=None)deiconify()iconify()iconname(newName=None) [#]iconmask(bitmap=None) [#]iconposition(x=None, y=None) [#]iconwindow(window=None) [#]geometry(geometry=None) [#]resizable(width=None, height=None) [#]iconbitmap(bitmap=None) [#]maxsize(width=None, height=None) [#]minsize(width=None, height=None) [#]overrideredirect(flag=None) [#]positionfrom(who=None) [#]sizefrom(who=None) [#]state(newstate=None) [#] iconic,withdraw,icon,normaltitle(string=None) [#]withdraw() [#] # Removes the window from the screen (without destroying it). To redraw the window, use deiconify.","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的komponent-methods","slug":"python-tkinter-komponent-methods","date":"2016-05-11T05:30:23.000Z","updated":"2016-12-02T10:39:14.045Z","comments":true,"path":"2016/05/11/python-tkinter-komponent-methods/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-komponent-methods/","excerpt":"","text":"demo 原文 1. configure123w.config(option=value)value = w.cget(\"option\")k = w.keys() 2. Event processing12345678mainloop()w.mainloop()w.quit()w.wait_variable(var)w.wait_visibility(window)w.wait_window(window)w.update()w.update_idletasks() 3. Event callbacks12345w.bind(event, callback)w.unbind(event)w.bind_class(event, callback)w.bindtags()w.bindtags(tags) 4. Alarm handlers and other non-event callbacks123id = w.after(time, callback)id = w.after_idle(callback)w.after_cancel(id) 5. Window management12w.lift()w.lower() 6. Window-related information123w.winfo_width(), w.winfo_height()w.winfo_reqwidth(), w.winfo_reqheight()w.winfo_id() 7. The option database12w.option_add(pattern, value)w.option_get(name, class) 8. window1234567891011121314151617181920destroy()winfo_rooty() [#]winfo_rootx() [#]winfo_rgb(color) [#]winfo_screen() [#]winfo_screencells() [#]winfo_screendepth() [#]winfo_screenheight() [#]winfo_screenmmheight() [#]winfo_screenmmwidth() [#]winfo_screenvisual() [#]winfo_screenwidth() [#]winfo_viewable() [#]winfo_vrootheight() [#]winfo_vrootwidth() [#]winfo_vrootx() [#]winfo_vrooty() [#]winfo_width() [#]winfo_x() [#]winfo_y() [#] 9. clipboard12clipboard_append(string, **options) [#]clipboard_clear(**options) [#]","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python-tkinter-komponent-canvas","slug":"python-tkinter-komponent-canvas","date":"2016-05-11T04:10:21.000Z","updated":"2016-12-02T10:39:14.044Z","comments":true,"path":"2016/05/11/python-tkinter-komponent-canvas/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-komponent-canvas/","excerpt":"","text":"demo 原文 1. Canvas12345678910canvas = tkinter.Canvas(root, height = 300, width = 300)canvas.pack()canvas.create_line( 0, 0, 200, 200, fill = \"red\", dash = (4,4)) 2. tags of canvas123456# the tagsitem = canvas.create_line(0, 0, 100, 100, tags=\"uno\")canvas.itemconfig(item, tags=(\"one\", \"two\"))canvas.addtag_withtag(\"three\", \"one\")canvas.gettags(item)canvas.find_withtag(\"one\") 3. other functions12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# other functionscoords(item, *coords)create_arc(bbox, **options)create_bitmap(position, **options)create_image(position, **options)create_line(coords, **options)create_oval(bbox, **options)create_polygon(coords, **options)create_rectangle(bbox, **options)create_text(position, **options)create_window(position, **options)dchars(item, from, to=None)delete(item)dtag(item, tag=None)find_above(item)find_all()find_below(item)find_closest(x, y, halo=None, start=None)find_enclosed(x1, y1, x2, y2)find_overlapping(x1, y1, x2, y2)find_withtag(item)focus(item=None)gettags(item)icursor(item, index)index(item, index)insert(item, index, text)itemcget(item, option)itemconfig(item, **options)itemconfigure(item, **options)lift(item, **options)lower(item, **options)move(item, dx, dy)postscript(**options)scale(self, xscale, yscale, xoffset, yoffset)scan_dragto(x, y)scan_mark(x, y)select_adjust(item, index)select_clear()select_from(item, index)select_item()select_to(item, index)tag_bind(item, event=None, callback, add=None)tag_lower(item)tag_raise(item)tag_unbind(self, item, event)tkraise(item, **options)xview(how, *args)xview_moveto(fraction)xview_scroll(number, what)yview(how, *args)yview_moveto(fraction)yview_scroll(number, what)","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的常用控件2","slug":"python-tkinter-komponents-two","date":"2016-05-11T04:09:58.000Z","updated":"2016-12-02T10:39:14.045Z","comments":true,"path":"2016/05/11/python-tkinter-komponents-two/","link":"","permalink":"http://kompasim.github.io/2016/05/11/python-tkinter-komponents-two/","excerpt":"","text":"demo 原文 1. Message123456# .config(**options)message = tkinter.Message( root, text = \"message is similar to label without image\")message.pack() 2. OptionMenu12345var = tkinter.StringVar(root)optionMenu = tkinter.OptionMenu(root, var, \"one\", \"two\", \"three\")optionMenu.pack()# print (optionMenu.keys())# print (dir(optionMenu)) 3. LabelFrame12345678910group = tkinter.LabelFrame( root, text = \"group box\", padx = 10, pady = 10).pack()entry = tkinter.Entry( root).pack()# as a view group 4. Scale12345678910111213141516171819s = tkinter.Scale( # a slider root, from_ = 10, to = 20, orient = \"vertical\", # horizontal resolution = 2 # the step ,use -1 to disable rounding. # digits = # label = # repeatinterval = # Default value is 100. # showvalue = # sliderlength = # sliderrelief = # tickinterval = # troughcolor =).pack()# coords(value=None) # Gets the screen coordinate corresponding to the given scale value.# get() # Gets the current scale value.# identify(x, y) # Checks if an active part of the scale is at the given screen location.# set(value) 5. Scrollbar12345678910111213141516171819202122232425262728# The Scrollbar widget is almost always used in conjunction with a Listbox, Canvas, or Text widget. Horizontal scrollbars can also be used with the Entry widget.# To connect a vertical scrollbar to such a widget, you have to do two things:# Set the widget’s yscrollcommand callbacks to the set method of the scrollbar.# Set the scrollbar’s command to the yview method of the widget.sb = tkinter.Scrollbar(root)sb.pack(side =\"right\",fill = \"y\")lb = tkinter.Listbox( root, yscrollcommand = sb.set)sb.config(command = lb.yview)for x in range(10,300,5): lb.insert(0,x)lb.pack(side = 'left',fill = \"both\")## activate(element)# elementborderwidth=# jump =# orient =# repeatdelay =# repeatinterval=# troughcolor=# delta(deltax, deltay)# fraction(x, y)# get()# identify(x, y)# set(lo, hi) 6. Spinbox12345678910111213141516171819202122# Spinboxsp = tkinter.Spinbox( # numner select root, from_ = 10, to = 100, # command = # xscrollcommand = # Used to connect a spinbox field to a horizontal scrollbar. This option should be set to the set method of the corresponding scrollbar)sp.pack()# Spinbox(root, values = (3,6,9))# delete(first, last=None)# get()# icursor(index)# identify(x, y)# index(index)# insert(index, text)# invoke(element)# scan_dragto(x)# scan_mark(x)# selection_adjust(index)# selection_clear()# selection_element(element=None) 7. Toplevel1234567# The Toplevel widget is used to display extra application windows, dialogs, and other “pop-up” windows.tl = tkinter.Toplevel()tl.title(\"top level\")lb = tkinter.Label(tl, text = \"this is Toplevel lavel\")lb.pack()btn = tkinter.Button(tl,text = \"destroy\",command = tl.destroy)btn.pack() 8. tkMessageBox123456789101112131415161718192021# The tkMessageBox module provides an interface to the message dialogs.# tkMessageBox.function(title, message [, options]).tkMessageBox.showwarning( \"Open file\", \"Cannot open this file\\n\")# showinfo# showwarning# showerror# askquestion# askokcancel# askyesno# askretrycancel# Message Box Optionsdefault # ABORT, RETRY, IGNORE, OK, CANCEL, YES, or NOicon # ERROR, INFO, QUESTION, or WARNINGmessage (string)parent (widget)title (string)type (constant) # ABORTRETRYIGNORE, OK, OKCANCEL, RETRYCANCEL, YESNO, or YESNOCANCEL.","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"python模块tkinter的常用控件1","slug":"python-tkinter-komponents-one","date":"2016-05-09T15:09:12.000Z","updated":"2016-12-02T10:39:14.045Z","comments":true,"path":"2016/05/09/python-tkinter-komponents-one/","link":"","permalink":"http://kompasim.github.io/2016/05/09/python-tkinter-komponents-one/","excerpt":"","text":"demo 原文 1. Label1234567891011121314151617181920212223242526272829303132# .config(**options)label = tkinter.Label( root, text = \"this is a label text 测试\", bg = \"green\", # background fg = \"red\", # foreground font = (\"arial\",15), width = 20, height = 5, activebackground = 'blue', # with the state option activeforeground = \"purple\", anchor = 'ne', # (center)where in the label the text should be located. # bitmap = borderwidth = 10, # bd compound = 'top', # (center)Controls how to combine text and image in the label # cursor = disabledforeground = \"red\", highlightbackground = \"blue\", highlightcolor = \"green\", highlightthickness = 2, # image = justify = 'center', # Defines how to align multiple lines of text ,right,left,center padx = 10, pady = 10, relief = 'ridge', # (flat),sunken,raised,groove state = 'normal', # active,disabled # takefocus = # textvariable = underline = 1, # (-1) wraplength = 100)label.pack(side=\"left\") 2. Frame123456789101112131415161718192021# .config(**options)frame = tkinter.Frame( root, bg = \"red\", width = 400, height = 600, # colormap = # container = # cursor = # class = bd = 2, # highlightbackground = # highlightcolor = # highlightthickness = relief = 'sunken', # flat,sunken,raised,groove,ridge # takefocus = # visual = padx = 10, pady = 10)frame.pack() 3. Entry12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# .config(**options)value = tkinter.StringVar()entry = tkinter.Entry( root, width = 200, bg = \"#222222\", fg = \"yellow\", bd = 20, textvariable = value, # cursor = # disabledbackground = # disabledforeground = font = (\"arial\",15), exportselection = True, #selected text is automatically exported to the clipboard. # highlightbackground = # highlightcolor = # highlightthickness = insertbackground = \"blue\", # Color used for the insertion cursor. insertborderwidth = 10, insertofftime = 1000, # Together with insertontime, this option controls cursor blinking. Both values are given in milliseconds. insertontime = 1000, insertwidth = 20, justify = \"right\", # right,left,center # invalidcommand = # invcmd = readonlybackground = \"orange\", # The background color to use when the state is “readonly”. relief = \"groove\", # flat,raised,ridge,sunken selectbackground = \"black\", selectborderwidth = 2, selectforeground = \"white\", show = \"\", # Controls how to display the contents of the widget. state = \"normal\", # disabled,readonly # takefocus = validate = \"none\" # focusin,focusout,focus # validatecommand = # vcmd = # same as validatecommand # xscrollcommand = # Used to connect an entry field to a horizontal scrollbar. This option should be set to the set method of the corresponding scrollbar.)value2 = value.get()value.set(\"hello python ...\")entry.focus_set()entry.delete(0,2)entry.icursor(3) # Moves the insertion cursor to the given index.index = entry,index(2) # Gets the numerical position corresponding to the given index.entry.insert(0,\"aaaaaa\")# scan_dragto(x), # Sets the scanning anchor for fast horizontal scrolling to the given mouse coordinate.# scan_mark(x),# Scrolls the widget contents sideways according to the given mouse coordinate. The text is moved 10 times the distance between the scanning anchor and the new position.## select_adjust(index) [#]# Same as selection_adjust.## select_clear() [#]# Same as selection_clear.## select_from(index) [#]# Same as selection_from.## select_present() [#]# Same as selection_present.## select_range(start, end) [#]# Same as selection_range.## select_to(index) [#]# Same as selection_to.## selection_adjust(index)# Adjusts the selection to include also the given character. If index is already selected, do nothing.## selection_clear()# Clears the selection.## selection_from(index)# Starts a new selection. This also sets the ANCHOR index.## selection_present()# Checks if text is selected.## lection_range(start, end)# Explicitly sets the selection range. Start must be smaller than end. Use selection_range(0, END) to select all text in the widget.## selection_to(index)# Selects all text between ANCHOR and the given index.## xview(index)# Makes sure the given index is visible. The entry view is scrolled if necessary.## xview_moveto(fraction)# Adjusts the entry view so that the given offset is at the left edge of the canvas. Offset 0.0 is the beginning of the entry string, 1.0 the end.## xview_scroll(number, what)# Scrolls the entry view horizontally by the given amount.entry.pack() 4. Text123456789101112131415161718192021222324252627282930313233# .config(**options)# Texttext = tkinter.Text( # maxundo = # relief = # setgrid = #Default value is 0. # spacing1 = # Default value is 0. # spacing2 = Default value is 0. # spacing3 = # Default value is 0. # state = # Default value is NORMAL. # tabs = # No default value. # takefocus= # No default value. # undo = # Default is 0. # wrap = #Default value is CHAR. # xscrollcommand = # yscrollcommand =)# text.tag_config(\"a\", foreground=\"blue\", underline=1)# text.tag_bind(\"Enter&gt;\", show_hand_cursor)# text.tag_bind(\"Leave&gt;\", show_arrow_cursor)# text.tag_bind(\"Button-1&gt;\", click)# text.config(cursor=\"arrow\")# text.insert(\"insert\", \"click here!\", \"a\")# text.tag_config(\"n\", background=\"yellow\", foreground=\"red\")# text.tag_config(\"a\", foreground=\"blue\")# text.insert(\"contents\", (\"n\", \"a\"))# text.insert(\"end\",\"aaa\") # end,current,insert,sel_first,sel_last# text.insert(1.0,'0123456789\\n') # x.y# text.insert(\"1.end\",'zzz') # x.endtext.pack() 5. Button123456789101112def call(): print(\"call pressed ...\")button = tkinter.Button( root, command = call, # default = # If set, the button is a default button. Tkinter will indicate this by drawing a platform specific indicator (usually an extra border). The default is DISABLED (no default behavior). # overrelief = # Alternative relief to use when the mouse is moved over the widget. If empty, always use the relief value.)button.flash() # Flash the button. This method redraws the button several times, alternating between active and normal appearance.button.invoke() # Call the command associated with the button.button.pack() 6. Checkbutton12345678910111213141516171819# config(**options)val = tkinter.StringVar()def cbcall(): val.set(val.get()+\"...\") print (val.get())checkButton = tkinter.Checkbutton( root, text = \"color\", variable = val, onvalue = \"blue\", offvalue =\"none\", command = cbcall)# deselect() # Deselects the checkbox; that is, sets the value to offvalue.# flash() # Redraws the button several times, alternating between active and normal appearance.# invoke() # Calls the command associated with the button.# select() # Selects the button; that is, sets the value to onvalue.# toggle() # Toggles the button.checkButton.pack() 7. Rudiobutton12345678910111213141516171819202122232425# config(**options)val = tkinter.StringVar()def radcall(): print(val.get())r1 = tkinter.Radiobutton( root, text = \"one\", variable = val, # the value of the value # textvariable = # the value of the text value = \"one1\", command = radcall)r1.pack()r2 = tkinter.Radiobutton( root, text = \"two\", variable = val, value = \"two2\", command = radcall)r2.pack()# deselect() # Deselects the button.# flash() # Redraws the button a couple of times, alternating between active and normal appearance. This can be useful when debugging, or to indicate when some other user action has activate the button.# invoke() # Calls the command associated with the button.# select() # Selects the button. 8. Listbox12345678910111213141516171819202122232425262728293031323334# config(**options)listbox = tkinter.Listbox( root, selectmode = \"extended\", # browse activestyle = \"underline\", # exportselection = # listvariable = # xscrollcommand = # yscrollcommand =)listbox.pack()for x in [x*2 for x in range(10)]: listbox.insert(\"end\",x)# lb.bind(\"&lt;Double-Button-1&gt;\", self.ok)# activate(index)# bbox(self, index)# curselection()# delete(first, last=None)# get(first, last=None)# index(index)# insert(index, *elements)# itemconfig(index, **options)# selection_anchor(index) # Sets the selection anchor to the given index. The anchor can be refered to using the ANCHOR index.# selection_clear(first, last=None) # Removes one or more items from the selection.# selection_includes(index) # Checks if an item is selected.# selection_set(first, last=None) # Adds one or more items to the selection.# size()# xview(column, *extra) # Controls horizontal scrolling.# yview(*what)# yview_scroll(number, what)# xview_scroll(number, what)# yview_moveto(fraction)# xview_moveto(fraction)","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"用python的tkinter模块开发桌面应用","slug":"python-tkinter-demo","date":"2016-05-09T14:36:37.000Z","updated":"2016-12-02T10:39:14.044Z","comments":true,"path":"2016/05/09/python-tkinter-demo/","link":"","permalink":"http://kompasim.github.io/2016/05/09/python-tkinter-demo/","excerpt":"","text":"demo 原文 1. 安装pythonclick here to download双击安装（我用的是3.5.1版本） 2. 运行脚本创建 trinker.py写以下代码双击运行代码 3. 入门1234567# import the tkinter core packageimport tkinter# create a root window with tkinterroot = tkinter.Tk()## start the event loop## (actually i don't know what does it look like in python at this time)root.mainloop() 4. 窗口参数1234567891011121314151617181920# print (root.keys) # printing the all options# root['key'] = valueroot['bg'] = 'black' # same to background# relief# screen# use# colormap# containerroot['cursor'] = 'abc.png' # cursor imageroot['bd'] = '2' # same to borderwidthroot['height'] = '400' # height# highlightbackground # 部件具有焦点时的亮点区域的背景颜色.# highlightcolor # 前景色的亮点区域，部件具有焦点时.# highlightthickness # 焦点时边框宽度root['padx'] = '10' # inner padding xroot['pady'] = '10' # inner padding y# takefocus # 获取焦点的键盘定义# visualroot['width'] = '400' # widthroot['menu'] = myMenu # add myMenu 5. 窗口函数12345678910# set the window's titleroot.title(\"this is a window created with tkinter in python\")# set the size of the window(WxH+X+Y)root.geometry('600x500+10+20');# set the resizabilityroot.resizable(width=True,height=False)# icon of the windowroot.iconbitmap('gif/003.ico')# enter the event looproot.mainloop() 7. 几何布局之pack123456789101112131415161718192021222324252627elem.pack(**options)# same ad packpack_configure()# remome , but not destroy , can display again with pack()pack_forget()# Returns a dictionary containing the current packer options.pack_info()# (Manager method) Controls geometry propagation. If enabled, the manager widget will be resized if not large enough to hold all the child widgets.pack_propagate(flag)# (Manager method) Returns a list of all child (“slave”) widgets managed by the packer for this widget.Returns: A list of child widgets.pack_slaves()# Where the widget is placed inside the packing box. Default is CENTER.anchor = center,x,e,nw,ne,se,sw,s,n# Specifies whether the widgets should be expanded to fill any extra space in the geometry master. If false (default), the widget is not expanded.expand = True,false# Specifies whether the widget should occupy all the space provided to it by the master.fill = none,both,x,y# Pack this widget inside the given widget.in =# inner padingipadx = 0ipady = 0# outer paddingpadx = 0pady = 0# Specifies which side to pack the widget against.side = left,right,top,bottom 7. 几何布局之grid1234567891011121314151617181920212223242526272829303132333435363738elem.grid(**options)# Returns a list of the “slave” widgets managed by this widget.grid_slaves(row = 'none', column = 'none')# Returns the current grid size for the geometry manager attached to this widget.grid_size()# Set options for a row,column of cells.# padsize=,pad=,weight=elem.grid_rowconfigure(index, **options)grid_columnconfigure(index, **options)# Enables or disables geometry propagation.girid_propagate(flag) True,False# Returns the grid cell under (or closest to) a given pixel.grid_location(x, y)# Return a dictionary containing the current cell options for the cell used by this widget.grid_info()# Remove this widget from the grid manager. The widget is not destroyed, and can be displayed again by grid or any other manager.grid_forget()# Same as grid.grid_configure(**options) [#]# The grid_bbox method.grid_bbox(column=None, row=None, col2=None, row2=None)# column row numbercolumn = 1row = 2# If given, indicates that the widget cell should span multiple columns or rows. The default is 1.columnspan = 2rowspan = 3# Place widget inside to the given widget.in =in_ = # same as in# the inner paddingsipadx =ipady =# the outer paddingspadx =pady =# Defines how to expand the widget if the resulting cell is larger than the widget itself.sticky = w,e,n,s,se,we,ne,nw 7. 几何布局之place1234567891011elem.place(**options)# Same as place.place_configure(**options)# The place_forget method.place_forget()# The place_info method.place_info()# The place_slaves method.place_slaves()Same as place_slaves.slaves() 8. 常用颜色定义 bg: 背景颜色 fg：前景颜色 activebackground: 当widget是活跃widget的背景颜色. activeforeground:小部件时，部件是活跃的前景色. background: widget的背景颜色。这也可以代表ASBG. disabledforeground: 前景色的部件，当部件被禁用. foreground: widget的前景色。这也可以表示为FG. highlightbackground: 部件具有焦点时的亮点区域的背景颜色. highlightcolor: 前景色的亮点区域，部件具有焦点时. selectbackground: widget的所选项目的背景颜色. selectforeground: 前景色为widget的选定项目.","categories":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://kompasim.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"http://kompasim.github.io/tags/tkinter/"}]},{"title":"atom编辑器常用插件","slug":"tools-atom-plugins","date":"2016-04-16T18:42:36.000Z","updated":"2017-04-01T14:04:43.000Z","comments":true,"path":"2016/04/17/tools-atom-plugins/","link":"","permalink":"http://kompasim.github.io/2016/04/17/tools-atom-plugins/","excerpt":"","text":"demo … 1. emmethtml补全 2. active-power-mode文字泡沫 3. power-mode随地泡沫 4. atom-mikumiku 5. autocomplete-plus当输入的时候，提供可能的候选项。 5. atomic-chromechrome里面的编辑框直接在atom编辑 6. minimap源码预览图，提供丰富的自定义选项 7. file-icons || file-icon-supplement显示文件类型对应的图标。 8. atom-beautify格式化代码，更统一的代码风格。 9. Color Picker在编辑器里面挑选颜色。 10. Editor-setting给每个语言独立设置扩展和功能 11. atom-terminal-panelatom内置命令行工具 12. Gitgit-control git面板 git-controlhub git面板 open-gitub 在atom打开gitub 13. language-JavaScript-jsxjsx扩展 14. markdown-preview-plusmarkdown预览 15. tool-bartool-bar-almighty // 我个人喜欢 tool-bar-shortcut //功能丰富 tool-bar-shortcuts //可以自选选项 右侧工具栏 （必须把tool-bar和上面三个任意选一个一起安装，只安装一个没有效果的） 16. atom-html-preview预览lhtml页面 17. vim-modeatom添加vin模式 18. pigments颜色代码着色显示（代码指定的颜色） 19. autocomplete-modules模块名自动补全 19. php-server给某个文件夹php服务器启动 20. live-server自动刷新的服务器 21. Reactatom-react-preview react预览 react 语法支持 atom-react-native-autocomplete RN代码补全 22. tree-view-git-status文件夹git状态 23. tree-view-background文件栏背景图 24. glowing-cursor打字时候光标颜色 25. filecolor文件名颜色 26. windows-context-menu给windows添加打开快捷方式 27. open-in-browser默认程序打开代码 28. soundkeyboard-sound typewriter-sound 敲代码声音 29. video-player背景播放视频 30. all-times-you-knowatom全局背景 31. hacker-news-background-titles黑客新闻标题和打开链接（无文件打开状态下在背景） 32. editor-background背景图片和视频 33. server-script同步/运行脚本到服务器 34. custom-title给atom设置个性化标题 35. status-barline-count-status move-status-items status-bar-clock battery-status git-status terminal-status ctags-status //类，函数，作用域 36. menu-manager顶部菜单管理 37. php-class-treephp类和方法树状图 38. NuclideFacebook的IDE 39. Script在编辑器里运行代码 40. remote-edit编辑服务器上的文件 41. remote-sync同步服务器上的文件 42. remote-ftp服务器文件的树状结构显示 43. browser-plus浏览器 44. preview-plus浏览一切 45. open-in-browser在浏览器打开 46. language-babeljsx语法 47. gamesatom-2048 snake tetromino 48. markdown-preview &amp;&amp; markdown-scroll-sync将markdown-preview编辑区和预览区同步滚动 49. markdown-writer方便管理markdown里的图片和链接 50. markdown-table-format格式化markdown的表格 51. atom-hexoatom编辑器里执行hexo命令写博客 52. github-issuregithub-issure帮助工具 53. githubgithub-user-dataip 显示文档里github账号的详细信息 create-github-repo 创建github repository my-github-profile 显示自己github信息在状态栏 github-notification 通知github消息 gist-it 快速分享代码到gist.github.com(可惜天朝用不了gist) 54. sourcerer根据遇到的问题查找stackoverflow代码片段 55. ask-stack在atom快速提问stackoverflow 56. debugnode-debugger php-debug python-debugger swift-debugger go-debug ... 57. file-header || header-42给当前编辑文件添加用户时间等头部信息 58 atom-minify || uglifyjs 代码混淆 59. sync-settings备份同步atom的插件和配置 60. atom-music本地音乐播放器 61. musicBoxatomn内嵌listenvideo.com 62. youtube-pane || playyoutubeatom内嵌youtube 63. themed-settings美化设置面板 64. markdown-themeable-pdfmarkdown转换成pdf,html,png 65. jupyter-notebook || note-bookatom内嵌notebook 66. markdown-scroll-sync当markdown-preview时编辑框和预览框同步 67. autocomplete-pythonpython代码自动补全 68. javascript-snippets输入特殊的字符后自动扩展成对应的 Javascript 代码片段 69. go-to-line跳转到指定的行，只要 ctrl + g 后输入行号即可 70. atom-ternjsjs,nodejs,es6补全 71. regex-railroad-diagram正则表达式图形化显示 72. atom-shell-commands自定义shell命令 73. advanced-open-file通过 Cmd-Alt-O/Ctrl-Alt-O 快速的打开文件或新建文件，同时支持路径补全 74. seti-ui带文件图标的黑色主题 75. php-cx-fixer运行php 76. git-log图形化git提交记录 77. pretty-json格式化json数据 78. drag-drop-text用鼠标复制剪切粘贴文本 79. to-base64 | base64文件转base64 80. draw-on-image截屏和编辑图片 81. command-toolbar个性化atom的各个按钮命令 82. Encourageatom来鼓励你写代码 83. platformio-ide-terminal又是一个很棒的terminal 84. auto hide sidebar自动隐藏树状文件面板 85. slack-chatslack的atom内置客户端 86. atomic-game-engine游戏引擎 87. canvas-snippetshtml5的canvas代码片段 88. draw-package文件里画图形 89. open-in-browsers在安装过的任意浏览器打开代码 90. lunar-particle-ui | seti-ui最漂亮的两个主题 91. atom-monokai | monokai最漂亮的两个语法主题 92. SyncedSidebarBg侧边树状文件结构的背景和主题背景同步 93. api-docs文档查看 94. goto-definitionAS的Ctrl+鼠标左键还记得吧 95. template-generator代码模板生成器 96. project-viewer项目管理 97. Docblockr主流语言给函数和类自动生成文档 98. api-docs | api-docs主流语言的api文档 demo demo demo","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"atom","slug":"atom","permalink":"http://kompasim.github.io/tags/atom/"}]},{"title":"12个令人惊讶的NodeJS开源项目","slug":"nodejs-amazing-projects","date":"2016-04-16T18:35:42.000Z","updated":"2016-12-02T10:39:14.042Z","comments":true,"path":"2016/04/17/nodejs-amazing-projects/","link":"","permalink":"http://kompasim.github.io/2016/04/17/nodejs-amazing-projects/","excerpt":"","text":"demo 在几年的时间里，NodeJS逐渐发展成一个成熟的开发平台，吸引了许多开发者。有许多大型高流量网站都采用NodeJS进行开发，像PayPal，此外，开发人员还可以使用它来开发一些快速移动Web框架。 除了Web应用外，NodeJS也被应用在许多方面，本文盘点了NodeJS在其它方面所开发的十大令人神奇的项目，这些项目涉及到应用程序监控、媒体流、远程控制、桌面和移动应用等等。 1.NodeOSNodeOS是采用NodeJS开发的一款友好的操作系统，该操作系统是完全建立在Linux内核之上的，并且采用shell和NPM进行包管理，采用NodeJS不仅可以很好地进行包管理，还可以很好的管理脚本、接口等。目前，Docker和Vagrant都是采用NodeOS的首个版本进行构建的。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 2.Noduino许多硬件黑客希望通过Web页面即可控制他们的Arduino，Noduino就是这样的一个项目，一个简单灵活的JavaScript和NodeJS框架，通过使用HTML5、Socket.IO和NodeJS的Web应用来控制Arduino。目前，该项目刚刚启动，支持一些常用功能，比如从Arduino中捕获事件（例如点击按钮）等。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 3.Node-WebKitNode-Webkit是一个基于Chromium与NodeJS的应用程序运行器，允许开发者使用Web技术编写桌面应用。它是NodeJS与WebKit技术的融合，提供一个跨Windows、Linux平台的客户端应用开发的底层框架。 跨平台开发并非易事，其中一种方式便是使用Web技术和Node-Webkit开发桌面应用来代替那些庞大且笨重的开发框架。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 4.PDFKitPDFKit是采用NodeJS开发的一款PDF文档生成库，它使用一个“HTML5 canvas-like API”来创建矢量图形和字体嵌入，并且支持许多标准的PDF功能，如文件的安全性、表的创建、文本换行、项目符号、高亮提示、注释等PDF功能。 注意，PDFKit是一款PDF生成工具，而不是一个文档转换系统。如果你想对现有的PDF文档进行操作，你可以使用另一个NodeJS项目—— Scissors。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 5.Log.ioLog.io是一个基于NodeJS开发的实时日志监控项目，在浏览器里访问。需要注意的是，Log.io只监视日志变动并不存储日志，不过这个没关系，只要知道日志存储在哪个机器上。 Log.io使用 Socket.io库发送活动报告的，和其他的监控工具一样，Log.io也采用服务器－客户端的模式。Log.io由两部分组成：server和harveste，server运行在机器 A（服务器）上监视和纪录其他机器发来的日志消息；log harvester 运行在机器 B（客户端）上用来监听和收集机器 B上的日志改动，并将改动发送给机器 A，每个需要纪录日志的机器都需要一个harvester。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 6.Nodecast或Leapcast受谷歌Chromecast技术的启发，开发者使用NodeJS开发出不少Chromecast仿真应用。如Nodecast或Leapcast。在PC上运行Nodecast或Leapcast，启动移动设备，选择一个支持Chromecast的应用程序，然后你就可以把移动广播上的内容映射到电脑上了，把电脑当成一个流媒体使用。 在这两个应用中，Nodecast比较简单些，但相应的功能也比较少，它仅经过了YouTube和Google Music的测试（ DEMO）。注意，大家不要把Nodecast与 Nodecast库混淆，后者使用DIAL发现协议提供链接设备（类似Chromecast）。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 7.NexeNexe是一款小巧却非常实用的NodeJS工具，它可以为NodeJS应用创建单一可执行的文件，并且无需安装运行时，这样，一些非技术终端的用户就无需变动NodeJS应用的所有依赖程序。如果你想发布一个NodeJS应用程序，并且没有GUI，Nexe则是您的最佳选择。目前该应用程序的一个弊端是不能在Windows平台上工作，只适用于Linux和Mac OS X平台，并且它也不支持本地NodeJS模块。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 8.HyroHyro是使用NodeJS开发的一款实时HTML5编辑器，如下图所示，左边显示HTML源码，右边显示内容。语法高亮由 CodeMirror提供。Hyro并不打算成为一款成熟的Web IDE，更像是一款轻量级的HTML或CSS记事本。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 9.HaroopadHaroopad是一款Linux上的markdown编辑器，使用Chromium作为UI，支持Windows、Mac OS X和Linux。主题样式丰富，语法标亮支持54种编程语言。 如下图所示，一边是代码编辑窗口，一边是预览窗口，可以实时更新。其邮件导出功能可以将文档发送到Tumblr和Evernote。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 10.TiddlyWiki5TiddlyWiki是一款交互式的wiki，非常灵活，它也可以在浏览器里作为单一的HTML文件或者是一款功能强大的NodeJS应用程序。 TiddlyWiki5是全新设计的5.0版本，它可以直接集成NodeJS解锁一系列的功能，但在单机模式下是不可用的。目前，TiddlyWiki5仍处于测试阶段。 NodeJS无所不能：细数12个令人惊讶的NodeJS开源项目 - kompasim - kompasim的博客 来自： InfoWorld 11.expressExpress 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。 12.phonegapphonegap是一个跨平台的移动app开发框架，可以把html css js写的页面打包成跨平台的可以安装的移动app，并且可以调用原生的几乎所有的功能，比如摄像头，联系人，加速度等。","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/categories/nodejs/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://kompasim.github.io/tags/NodeJS/"}]},{"title":"nwjs项目package.json文件详解","slug":"tools-nwjs-package","date":"2016-04-16T18:20:12.000Z","updated":"2016-12-02T10:39:14.043Z","comments":true,"path":"2016/04/17/tools-nwjs-package/","link":"","permalink":"http://kompasim.github.io/2016/04/17/tools-nwjs-package/","excerpt":"","text":"demo 1. 必填 main(string)APP的主入口，指定一个html文件，如：main:”index.htm”。 name(string)APP的名称，必须具有唯一性。例子： 1234&#123;\"name\":\"nw-demo\",\"main\":\"index.html\"&#125; 2. 特征 nodejs(boolean)设置是否禁用nodejs。 node-main(string)指定node.js的脚本文件的路径 single-instance(boolean)是否只允许启动单个实例，true为只允许一个软件实例运行。 js-flags（string）指定js引擎，如：“js-flags”: “–harmony_proxies –harmony_collections”例子： 1234&#123;\"nodejs\":true, \"node-main\":\"chao.js\"&#125; 3. window title(string)窗口标题（设置index.html里的标签中的文字，如果已经设置就不会生效。） width/height(int)设置窗口大小。 toolbar(boolean)设置工具栏是否显示 icon(string)设置软件图标。 min_width/min_heightint）设置软件的最小宽度和高度 max_width/max_heightint）设置软件的最大宽度和高度 resizable(boolean)设置窗口是否可以调整大小 always-on-top(boolean)设置窗口总是在最上层（置顶） fullscreen(boolean) 窗口全屏 kiosk(boolean)是否使用Kiosk模式。在Kiosk模式下，应用程序将是全屏，并试图阻止用户离开应用程序，所以你应该记得，提供了一种在应用程序离开Kiosk模式。这种模式主要用于演示公共显示器（可用节点的-webkit v0.3.1后） show(boolean) 显示和隐藏窗口 positionnull:默认center :软件启动在中间显示。mouse:软件启动在鼠标指标位置显示。 例子：123456\"window\": &#123; \"frame\": false, \"toolbar\": false, \"width\": 800, \"height\": 800&#125; 4. webkit plugin(boolean)是否启用外部插件 java(boolean)是否启用java page-cache(boolean)是否启用页面缓存 snapshot指定要加载的应用程序的快照文件的路径。快照文件包含应用程序的编译代码。例子：123\"webkit\": &#123; \"plugin\": false&#125; 5. 其它 version版本号，由 3 组数字组成 major.minor.bugfix 。尚在开发阶段时版本号应该加上后缀 -dev，例如 1.1.3-dev。需要手工修改，不支持根据规则自动变化。 author模块的作者。 keywords关键字,如:“keywords”：[“a”,”b”] description模块的描述。 bugsbug 问题 的反馈地址信息。javascript对象，可在对象中自定义除email、url等其他地址类型信息，比如电话、QQ等。 maintainers维护者 123456789\"maintainers\":[ &#123;\"name\": \"chao\",\"email\": \"123456789@qq.com\",\"web\": \"http://www.abcdefg.com\",&#125;] contributors捐赠者 repositories库、模块 7. 实例1234567891011121314151617181920212223&#123; \"main\": \"index.html\", \"name\": \"nw-demo\", \"description\": \"demo app of node-webkit\", \"version\": \"0.1.0\", \"keywords\": [ \"demo\", \"node-webkit\" ], \"window\": &#123; \"title\": \"node-webkit demo\", \"icon\": \"link.png\", \"toolbar\": true, \"frame\": false, \"width\": 800, \"height\": 500, \"position\": \"mouse\", \"min_width\": 400, \"min_height\": 200, \"max_width\": 800, \"max_height\": 600 &#125;, \"webkit\": &#123; \"plugin\": true &#125;&#125;","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"nwjs","slug":"nwjs","permalink":"http://kompasim.github.io/tags/nwjs/"}]},{"title":"nwjs快速入门","slug":"tools-nwjs-demo","date":"2016-04-16T17:54:37.000Z","updated":"2016-12-02T10:39:14.043Z","comments":true,"path":"2016/04/17/tools-nwjs-demo/","link":"","permalink":"http://kompasim.github.io/2016/04/17/tools-nwjs-demo/","excerpt":"","text":"demo 本文介绍了 NW.js（node-webkit） 的基本知识，通过本入门指南的学习，可以让你快速构建一个 NW.js 的桌面应用。 1. 简介NW.js （原名 node-webkit）是一个基于 Chromium 和 node.js 的应用运行时，通过它可以用 HTML 和 JavaScript 编写原生应用程序。它还允许您从 DOM 调用 Node.js 的模块 ，实现了一个用所有 Web 技术来写原生应用程序的新的开发模式。 这里是 使用 NW.js 的应用和公司列表 ，可以看到 NW.js 实际应用效果。 2. 功能特性用现代 HTML5,CSS3,JS 和 WebGL 来编写应用程序。完全支持 Node.js APIs 和所有其 第三方模块 .良好的性能:Node 和 WebKit 运行在相同的线程:函数调用是更简洁;对象在同一堆可以互相引用;容易打包和分发应用程序。支持 Linux、Mac OS X 和 Windows 3. 下载地址: http://dl.nwjs.io/ 4. 快速入门我们新建一个目录 quick-start ，来代表项目名称。 5. 客户端代码在 quick-start 目录下，创建 index.html : 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;title&gt;NW.js 快速入门|www.waylau.com&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;NW.js 快速入门&lt;/h1&gt; We are using node.js &lt;script&gt;document.write(process.version)&lt;/script&gt;. &lt;br/&gt; More demos,see &lt;a href=\"http://www.waylau.com\" title=\"更多示例\"&gt;www.waylau.com&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; 在 quick-start 目录下，创建 package.json :12345&#123; \"name\": \"nw-quick-start-demo\", \"version\": \"0.0.1\", \"main\": \"index.html\"&#125; 6. 运行运行: bash $ /path/to/nw .(假设当前目录包含 ‘package.json’)注意: 在 Windows 系统, 拖动包含 package.json 文件夹 quick-start ，到 nw.exe 来打开它。 注意：在 OSX 系统,可执行编译文件是在隐藏目录的 .app 文件内。为了在 OSX 运行 node-webkit , 输入: /path/to/nwjs.app/Contents/MacOS/nwjs . (假设当前目录包含 ‘package.json’) 7. 更多设置将 quick-start 复制为另外要给项目 quick-start-window 。 修改 package.json 来设置程序。123456789101112131415161718&#123; \"name\": \"nw-quick-start-window-demo\", \"version\": \"0.0.1\", \"main\": \"index.html\", \"window\": &#123; \"title\": \"nw-quick-start-window-demo\", \"toolbar\": false, \"frame\": true, \"show_in_taskbar\":true, \"width\": 800, \"height\": 500, \"position\": \"mouse\", \"min_width\": 400, \"min_height\": 200, \"max_width\": 800, \"max_height\": 600 &#125;&#125; 窗口外观常用属性包括： 123456789101112title : 字符串，设置默认 title。width/height : 主窗口的大小。toolbar : bool 值。是否显示导航栏。icon : 窗口的 icon。position :字符串。窗口打开时的位置，可以设置为“null”、“center”或者“mouse”。min_width/min_height : 窗口的最小值。max_width/max_height : 窗口显示的最大值。resizable : bool 值。是否允许调整窗口大小。always-on-top : bool 值。窗口置顶。fullscreen : bool 值。是否全屏显示。show_in_taskbar : 是否在任务栏显示图标。frame : bool 值。如果设置为 false，程序将无边框显示。 8. 发布本节以 Windows 环境下为例。 新建发布包 将下载的 NW.js 文件解压，复制一份作为项目的发布包模板，本例名称为 nwjs-v0.12.3-win-x64 压缩 将 quick-start 内的文件压缩成 .zip 文件 quick-start.zip ，修改文件后缀为 quick-start.nw (这个是管方的说法，其实不该后缀 直接是 quick-start.zip 可以是可以) 合成 将 quick-start.nw 放入发布包 nwjs-v0.12.3-win-x64 ， 在命令下，切换到 nwjs-v0.12.3-win-x64 目录，并执行 copy /b nw.exe+quick-start.nw quick-start.exe 此时，生成了可执行文件 quick-start.exe ，双击即可运行程序 删除冗余 最终的发布包，未减少体积，可以删除项目用不到的冗余文件，由于 nw.exe 、 quick-start.nw 文件已经合成为了 quick-start.exe ,故删之。又因为该项目简单，没有用到媒体库，可以删除 nwjc.exe 、 ffmpegsumo.dll 等 源码 见： https://github.com/waylau/nwjs-demos 中的 quick-start 和 quick-start-window 。","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"nwjs","slug":"nwjs","permalink":"http://kompasim.github.io/tags/nwjs/"}]},{"title":"cordova快速入门","slug":"tools-cordova-demo","date":"2016-04-16T17:38:53.000Z","updated":"2016-12-02T10:39:14.041Z","comments":true,"path":"2016/04/17/tools-cordova-demo/","link":"","permalink":"http://kompasim.github.io/2016/04/17/tools-cordova-demo/","excerpt":"","text":"demo 1. 下载和安装Cordova框架现在cordova是利用nodeJS进行管理，所以需要先下载nodeJS。其中，就包含了npm管理器。下载地址：https://nodejs.org/在命令行窗口确认安装完成，输入命令,查看nodejs版本 npm –version 2.在windows上安装Cordova在命令行窗口输入： npm install -g cordova 安装完后输入命令检查是否安装成功 cordova -v 3.安装android开发环境要求的jdk自己到sun.com 下载java的开发环境，现在是最新版1.8，很简单，双击exe安装 4. 安装ADT要编译android应用，需要adt sdk编译器，这个是google的，可能需要翻墙下载ADT，地址： http://developer.android.com/sdk/ 安装完后 启动Android SDK Manager，下载android sdk和工具 上面主要的难点和问题是android sdk的安装，因为被墙的原因，安装可能需要耗点时间和精力。安装完后就可以使用cordova了。 5.创建第一个phonegap/cordova 项目创建cordova项目，第一个demo是目录，第二个是应用包名，第三个参数是应用名称 cordova create demo com.baidu.demo demo 6.添加android支持Cordova platform add android 第一次创建项目需要联网下载模板，可能需要点时间，等待完成后输入编译命令 Cordova run android 如果android手机连接到了电脑，应用会被安装到手机，可以在手机上查看效果了，如果手机未连接到电脑或者未正常驱动，则可以单独编译然后手动安装 Cordova build android Build后apk会产生，放在项目的platform/android/builds/下面","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"cordova","slug":"cordova","permalink":"http://kompasim.github.io/tags/cordova/"}]},{"title":"expressjs框架的安装和使用","slug":"nodejs-express-demo","date":"2016-04-16T17:09:09.000Z","updated":"2016-12-02T10:39:14.041Z","comments":true,"path":"2016/04/17/nodejs-express-demo/","link":"","permalink":"http://kompasim.github.io/2016/04/17/nodejs-express-demo/","excerpt":"","text":"demo 1. 安装先说下如果需要用express 3.x版本，直接使用nmp 中的@字符确定版本，指令如下： npm install -g express@3.5 如果需要使用4.0，这里有个需要注意的问题在4.x版本express 已经把命令行工具分离出来 （链接https://github.com/expressjs/generator） 我们现在全局安装只需要安装这个命令行工具就可以，指令如下： npm install -g express-generator 2. 创建项目$ express blog &amp;&amp;cd blog blog是安装的文件夹名 $ npm install 安装express及依赖 $ npm start 这里需要注意 express 4.x 无法以 node app.js 为启动方式，而是用指令 npm start 作为启动 访问 http://localhost:3000/ 出现熟悉的Welcome to Express，证明安装成功。 这时我们就可以尝试4.0的新功能了。 3. 目录结构 bin, 存放启动项目的脚本文件 node_modules, 存放所有的项目依赖库。 public，静态文件(css,js,img) routes，路由文件(MVC中的C,controller) views，页面文件(Ejs模板) package.json，项目依赖配置及开发者信息 app.js，应用核心配置文件 4. package.json项目配置1234567891011121314151617&#123; \"name\": \"express4-demo\", \"version\": \"0.0.0\", \"private\": true, \"scripts\": &#123; \"start\": \"node ./bin/www\" &#125;, \"dependencies\": &#123; \"body-parser\": \"~1.10.2\", \"cookie-parser\": \"~1.3.3\", \"debug\": \"~2.1.1\", \"ejs\": \"~2.2.3\", \"express\": \"~4.11.1\", \"morgan\": \"~1.5.1\", \"serve-favicon\": \"~2.2.0\" &#125;&#125; 5. app.js核心文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// 加载依赖库，原来这个类库都封装在connect中，现在需地注单独加载var express = require('express');var path = require('path');var favicon = require('serve-favicon');var logger = require('morgan');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');// 加载路由控制var routes = require('./routes/index');//var users = require('./routes/users');// 创建项目实例var app = express();// 定义EJS模板引擎和模板文件位置，也可以使用jade或其他模型引擎app.set('views', path.join(__dirname, 'views'));app.set('view engine', 'ejs');// 定义icon图标app.use(favicon(__dirname + '/public/favicon.ico'));// 定义日志和输出级别app.use(logger('dev'));// 定义数据解析器app.use(bodyParser.json());app.use(bodyParser.urlencoded(&#123; extended: false &#125;));// 定义cookie解析器app.use(cookieParser());// 定义静态文件目录app.use(express.static(path.join(__dirname, 'public')));// 匹配路径和路由app.use('/', routes);//app.use('/users', users);// 404错误处理app.use(function(req, res, next) &#123; var err = new Error('Not Found'); err.status = 404; next(err);&#125;);// 开发环境，500错误处理和错误堆栈跟踪if (app.get('env') === 'development') &#123; app.use(function(err, req, res, next) &#123; res.status(err.status || 500); res.render('error', &#123; message: err.message, error: err &#125;); &#125;);&#125;// 生产环境，500错误处理app.use(function(err, req, res, next) &#123; res.status(err.status || 500); res.render('error', &#123; message: err.message, error: &#123;&#125; &#125;);&#125;);// 输出模型appmodule.exports = app; 6. 路由功能app.route方法会返回一个Route实例，它可以继续使用所有的HTTP方法，包括get,post,all,put,delete,head等。123app.route('/users') .get(function(req, res, next) &#123;&#125;) .post(function(req, res, next) &#123;&#125;) express.Router类，则可以帮助我们更好的组织代码结构。在app.js文件中，定义了app.use(‘/’, routes); routes是指向了routes目录下的index.js文件，./routes/index.js文件中，express.Router被定义使用，路径/*处理都会由routes/index.js文件里的Router来处理。如果我们要管理不同的路径，那么可以直接配置为多个不同的Router。123app.use('/user', require('./routes/user').user);app.use('/admin', require('./routes/admin').admin);app.use('/', require('./routes')); 7. 程序代码12345~ git clone git@github.com:bsspirit/nodejs-demo.git # 下载github项目~ cd nodejs-demo # 进入下载目录~ git checkout express4 # 切换到express4的分支~ npm install # 下载依赖库~ npm start # 启动服务器","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/categories/nodejs/"}],"tags":[{"name":"expressjs","slug":"expressjs","permalink":"http://kompasim.github.io/tags/expressjs/"},{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/tags/nodejs/"}]},{"title":"react-webpack-babel环境搭建","slug":"react-webpack-babel","date":"2016-04-06T07:03:23.000Z","updated":"2016-12-02T10:39:14.046Z","comments":true,"path":"2016/04/06/react-webpack-babel/","link":"","permalink":"http://kompasim.github.io/2016/04/06/react-webpack-babel/","excerpt":"","text":"demo 原文 1、创建学习目录mkdir learncd learn 2、npm初始化项目npm init //根据相关提示完善信息，入口js文件：src/index.js 3、安装相关模块安装相关react npm包，并且使用es2015（也就是es6支持，需要babel-preset-es2015包），因为我之前做个一些js相关项目，所以部分npm包已经全局安装，比如webpack等等，大家根据提示补足自己的npm包即可 npm install --global webpacknpm install --save reactnpm install --save react-domnpm install --save babel-loadernpm install --save babel-preset-es2015npm install --save babel-preset-react 4、创建相关文件目录结构mkdir src //存放源文件mkdir build //存放编译后的js文件 5、创建webpack配置文件（webpack好强大，之后再做详细的学习）touch webpack.config.js 12345678910111213141516171819module.exports = &#123;entry:[ './src/index.js'],output: &#123; path: './build/', filename: 'bundle.js'&#125;, module: &#123; loaders: [&#123; test: /\\.js$/, exclude: /(node_modules|bower_components)/, loader: 'babel-loader', query: &#123; presets: ['es2015','react'] &#125; &#125;] &#125;&#125;; 6、创建index.js源文件，书写经典的Hello World！touch src/index.js 1234567var React = require('react');var ReactDOM = require('react-dom');ReactDOM.render(&lt;h1&gt;Hello, world!&lt;/h1&gt;,document.getElementById('example')); 7、利用webpack编译源文件根目录下直接运行webpack，运行完成后会在build目录生成bundle.js文件 $ webpack1234567Hash: 32a8e736b4323f7ec350Version: webpack 1.12.9Time: 1318ms Asset Size Chunks Chunk Namesbundle.js 676 kB 0 [emitted] main [0] multi main 28 bytes &#123;0&#125; [built] + 159 hidden modules 8、创建index.html承载体文件，引入bundle.js，方便在浏览器中运行touch build/index.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;React环境搭建&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"example\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=\"bundle.js\"&gt;&lt;/script&gt;&lt;/html&gt; 9、浏览器直接打开index.html，出现Hello world！下一步就是搭建调试环境","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"reactjs","slug":"reactjs","permalink":"http://kompasim.github.io/tags/reactjs/"},{"name":"webpack","slug":"webpack","permalink":"http://kompasim.github.io/tags/webpack/"},{"name":"babel","slug":"babel","permalink":"http://kompasim.github.io/tags/babel/"}]},{"title":"Node.js安装和NPM包管理器使用","slug":"nodejs-npm-demo","date":"2016-03-21T13:43:52.000Z","updated":"2016-12-02T10:39:14.043Z","comments":true,"path":"2016/03/21/nodejs-npm-demo/","link":"","permalink":"http://kompasim.github.io/2016/03/21/nodejs-npm-demo/","excerpt":"","text":"demo 在Windows上安装NodeNode从0.6.0版本开始支持Windows，要在Windows上安装Node，只用从nodejs下载node-v*.msi，然后双击运行即可，然后你可能会遇到安全对话框。一直下一步完事儿 运行Node现在已经可以运行Node了，你可以先简单的体验一下Node的命令行交互界面（CLI:command-line interface），只需要调用Node可执行文件就行：1$ node 12345&gt; console.log(&apos;Hello World!&apos;);Hello World!&gt; undefined 安装模块全局模式1$ npm install –g &lt;package name&gt; 本地模式1$ npm install &lt;package name&gt; 卸载模块全局模式1$ npm uninstall -g &lt;package name&gt; 本地模式1$ npm uninstall &lt;package name&gt; 更新模块全局模式1$ npm update -g &lt;package name&gt; 本地模式1$ npm update &lt;package name&gt; 使用package.json文件定义依赖关系package.json是一个JSON格式的文件，包含了一系列属性，但是如果仅仅是为了说明程序的依赖关系，则只用一个dependencies属性就行。比如，一个叫MyApp的应用程序依赖sax,nano和request模块，只需要建立这样一个package.json：1$ npm init 安装依赖1$ npm install 更新依赖1$ npm update","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"nodejs","slug":"nodejs","permalink":"http://kompasim.github.io/tags/nodejs/"}]},{"title":"built a personal blog with hexo","slug":"tools-hexo-demo","date":"2016-02-29T16:00:00.000Z","updated":"2017-03-30T12:18:35.000Z","comments":true,"path":"2016/03/01/tools-hexo-demo/","link":"","permalink":"http://kompasim.github.io/2016/03/01/tools-hexo-demo/","excerpt":"","text":"demo Welcome to Hexo!This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. install nodejsdownload nodejs from here to enable nodejs package manager install hexo1npm install -g hexo Create a new blog1$ hexo init myBlog More info: Writing Create a new post1$ hexo new \"My-New-Post\" More info: Writing Generate static files from markdown files1$ hexo generate More info: Generating Run server1$ hexo server More info: Server view the effectyou can see the pages on http://localhost:4000 register on githubyou should have a account on github before you go to the next step https://github.com/ Create a repositoryyou had to create a repository named ‘your_account.github.io’more info: repository install the gityou can download git from here and install it globally .the path should be added into the path environment variable12$ git --versiongit version 2.7.2.windows.1 install hexo-depoyer-git1npm install hexo-deployer-git --save configureedit _config.yml file on hexo root directory1234deploy: type: github repository: https://github.com/xiaomiya/xiaomiya.github.com.git branch: master Deploy to github1$ hexo deploy More info: Deployment backup1npm install hexo-git-backup 1234567# backup## docs: https://github.com/coneycode/hexo-git-backupbackup: type: git repository: github: https://github.com/xxx/hexo-blog-xxx.git,master gitcafe: https://github.com/xxx/hexo-blog-xxx.git,master 1hexo backup More info: backup the endit is time to have a deep breath ! a personal blog is ready on github !you can view hexo.io to more informations , plugins and awsome themes … example demo","categories":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"http://kompasim.github.io/tags/tools/"},{"name":"hexo","slug":"hexo","permalink":"http://kompasim.github.io/tags/hexo/"}]}]}